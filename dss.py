#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Thu Oct 26 03:53:32 2017 by generateDS.py version 2.28b.
# Python 2.7.9 (default, Jun 29 2016, 13:08:31)  [GCC 4.9.2]
#
# Command line options:
#   ('--silence', '')
#   ('--external-encoding', 'utf-8')
#   ('-o', '../dsr-xml-validation/dss.py')
#   ('-s', '../dsr-xml-validation/dsssubs.py')
#
# Command line arguments:
#   ../dsr-xml-validation/Dealer Service Sale.xsd
#
# Command line:
#   generateDS.py --silence --external-encoding="utf-8" -o "../dsr-xml-validation/dss.py" -s "../dsr-xml-validation/dsssubs.py" ../dsr-xml-validation/Dealer Service Sale.xsd
#
# Current working directory (os.getcwd()):
#   generateDS
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class DATA_DATE(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DATA_DATE)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DATA_DATE.subclass:
            return DATA_DATE.subclass(*args_, **kwargs_)
        else:
            return DATA_DATE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DATA_DATE', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DATA_DATE')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DATA_DATE')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DATA_DATE', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DATA_DATE'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DATA_DATE', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class DATA_DATE


class DEALER_BRANCH_ID(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DEALER_BRANCH_ID)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DEALER_BRANCH_ID.subclass:
            return DEALER_BRANCH_ID.subclass(*args_, **kwargs_)
        else:
            return DEALER_BRANCH_ID(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DEALER_BRANCH_ID', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DEALER_BRANCH_ID')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DEALER_BRANCH_ID')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DEALER_BRANCH_ID', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DEALER_BRANCH_ID'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DEALER_BRANCH_ID', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class DEALER_BRANCH_ID


class DEALER_ID(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DEALER_ID)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DEALER_ID.subclass:
            return DEALER_ID.subclass(*args_, **kwargs_)
        else:
            return DEALER_ID(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DEALER_ID', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DEALER_ID')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DEALER_ID')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DEALER_ID', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DEALER_ID'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DEALER_ID', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class DEALER_ID


class DEALER_SYSTEM(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DEALER_SYSTEM)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DEALER_SYSTEM.subclass:
            return DEALER_SYSTEM.subclass(*args_, **kwargs_)
        else:
            return DEALER_SYSTEM(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DEALER_SYSTEM', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DEALER_SYSTEM')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DEALER_SYSTEM')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DEALER_SYSTEM', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DEALER_SYSTEM'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DEALER_SYSTEM', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class DEALER_SYSTEM


class EXTRACTION_DATE(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EXTRACTION_DATE)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EXTRACTION_DATE.subclass:
            return EXTRACTION_DATE.subclass(*args_, **kwargs_)
        else:
            return EXTRACTION_DATE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='EXTRACTION_DATE', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EXTRACTION_DATE')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EXTRACTION_DATE')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='EXTRACTION_DATE', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='EXTRACTION_DATE'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='EXTRACTION_DATE', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class EXTRACTION_DATE


class SERVICE_SALE(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SERVICE_SALE_HEADER=None, SERVICE_SALE_DETAIL=None, SERVICE_SALE_CONTROL=None):
        self.original_tagname_ = None
        self.SERVICE_SALE_HEADER = SERVICE_SALE_HEADER
        if SERVICE_SALE_DETAIL is None:
            self.SERVICE_SALE_DETAIL = []
        else:
            self.SERVICE_SALE_DETAIL = SERVICE_SALE_DETAIL
        self.SERVICE_SALE_CONTROL = SERVICE_SALE_CONTROL
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SERVICE_SALE)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SERVICE_SALE.subclass:
            return SERVICE_SALE.subclass(*args_, **kwargs_)
        else:
            return SERVICE_SALE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SERVICE_SALE_HEADER(self): return self.SERVICE_SALE_HEADER
    def set_SERVICE_SALE_HEADER(self, SERVICE_SALE_HEADER): self.SERVICE_SALE_HEADER = SERVICE_SALE_HEADER
    def get_SERVICE_SALE_DETAIL(self): return self.SERVICE_SALE_DETAIL
    def set_SERVICE_SALE_DETAIL(self, SERVICE_SALE_DETAIL): self.SERVICE_SALE_DETAIL = SERVICE_SALE_DETAIL
    def add_SERVICE_SALE_DETAIL(self, value): self.SERVICE_SALE_DETAIL.append(value)
    def insert_SERVICE_SALE_DETAIL_at(self, index, value): self.SERVICE_SALE_DETAIL.insert(index, value)
    def replace_SERVICE_SALE_DETAIL_at(self, index, value): self.SERVICE_SALE_DETAIL[index] = value
    def get_SERVICE_SALE_CONTROL(self): return self.SERVICE_SALE_CONTROL
    def set_SERVICE_SALE_CONTROL(self, SERVICE_SALE_CONTROL): self.SERVICE_SALE_CONTROL = SERVICE_SALE_CONTROL
    def hasContent_(self):
        if (
            self.SERVICE_SALE_HEADER is not None or
            self.SERVICE_SALE_DETAIL or
            self.SERVICE_SALE_CONTROL is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SERVICE_SALE', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SERVICE_SALE')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SERVICE_SALE')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SERVICE_SALE', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SERVICE_SALE'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SERVICE_SALE', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SERVICE_SALE_HEADER is not None:
            self.SERVICE_SALE_HEADER.export(outfile, level, namespace_, name_='SERVICE_SALE_HEADER', pretty_print=pretty_print)
        for SERVICE_SALE_DETAIL_ in self.SERVICE_SALE_DETAIL:
            SERVICE_SALE_DETAIL_.export(outfile, level, namespace_, name_='SERVICE_SALE_DETAIL', pretty_print=pretty_print)
        if self.SERVICE_SALE_CONTROL is not None:
            self.SERVICE_SALE_CONTROL.export(outfile, level, namespace_, name_='SERVICE_SALE_CONTROL', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SERVICE_SALE_HEADER':
            obj_ = SERVICE_SALE_HEADER.factory()
            obj_.build(child_)
            self.SERVICE_SALE_HEADER = obj_
            obj_.original_tagname_ = 'SERVICE_SALE_HEADER'
        elif nodeName_ == 'SERVICE_SALE_DETAIL':
            obj_ = SERVICE_SALE_DETAIL.factory()
            obj_.build(child_)
            self.SERVICE_SALE_DETAIL.append(obj_)
            obj_.original_tagname_ = 'SERVICE_SALE_DETAIL'
        elif nodeName_ == 'SERVICE_SALE_CONTROL':
            obj_ = SERVICE_SALE_CONTROL.factory()
            obj_.build(child_)
            self.SERVICE_SALE_CONTROL = obj_
            obj_.original_tagname_ = 'SERVICE_SALE_CONTROL'
# end class SERVICE_SALE


class MARQUE(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MARQUE)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MARQUE.subclass:
            return MARQUE.subclass(*args_, **kwargs_)
        else:
            return MARQUE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MARQUE', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MARQUE')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MARQUE')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MARQUE', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MARQUE'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MARQUE', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class MARQUE


class SERVICE_ADVISOR_FIRSTNAME(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SERVICE_ADVISOR_FIRSTNAME)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SERVICE_ADVISOR_FIRSTNAME.subclass:
            return SERVICE_ADVISOR_FIRSTNAME.subclass(*args_, **kwargs_)
        else:
            return SERVICE_ADVISOR_FIRSTNAME(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SERVICE_ADVISOR_FIRSTNAME', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SERVICE_ADVISOR_FIRSTNAME')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SERVICE_ADVISOR_FIRSTNAME')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SERVICE_ADVISOR_FIRSTNAME', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SERVICE_ADVISOR_FIRSTNAME'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SERVICE_ADVISOR_FIRSTNAME', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class SERVICE_ADVISOR_FIRSTNAME


class SERVICE_ADVISOR_LASTNAME(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SERVICE_ADVISOR_LASTNAME)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SERVICE_ADVISOR_LASTNAME.subclass:
            return SERVICE_ADVISOR_LASTNAME.subclass(*args_, **kwargs_)
        else:
            return SERVICE_ADVISOR_LASTNAME(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SERVICE_ADVISOR_LASTNAME', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SERVICE_ADVISOR_LASTNAME')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SERVICE_ADVISOR_LASTNAME')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SERVICE_ADVISOR_LASTNAME', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SERVICE_ADVISOR_LASTNAME'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SERVICE_ADVISOR_LASTNAME', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class SERVICE_ADVISOR_LASTNAME


class SERVICE_ADVISOR_BIRTHDATE(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SERVICE_ADVISOR_BIRTHDATE)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SERVICE_ADVISOR_BIRTHDATE.subclass:
            return SERVICE_ADVISOR_BIRTHDATE.subclass(*args_, **kwargs_)
        else:
            return SERVICE_ADVISOR_BIRTHDATE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SERVICE_ADVISOR_BIRTHDATE', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SERVICE_ADVISOR_BIRTHDATE')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SERVICE_ADVISOR_BIRTHDATE')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SERVICE_ADVISOR_BIRTHDATE', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SERVICE_ADVISOR_BIRTHDATE'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SERVICE_ADVISOR_BIRTHDATE', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class SERVICE_ADVISOR_BIRTHDATE


class SERVICE_ADVISOR_STAFFCODE(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SERVICE_ADVISOR_STAFFCODE)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SERVICE_ADVISOR_STAFFCODE.subclass:
            return SERVICE_ADVISOR_STAFFCODE.subclass(*args_, **kwargs_)
        else:
            return SERVICE_ADVISOR_STAFFCODE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SERVICE_ADVISOR_STAFFCODE', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SERVICE_ADVISOR_STAFFCODE')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SERVICE_ADVISOR_STAFFCODE')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SERVICE_ADVISOR_STAFFCODE', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SERVICE_ADVISOR_STAFFCODE'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SERVICE_ADVISOR_STAFFCODE', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class SERVICE_ADVISOR_STAFFCODE


class RO_NO(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, RO_NO)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if RO_NO.subclass:
            return RO_NO.subclass(*args_, **kwargs_)
        else:
            return RO_NO(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='RO_NO', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('RO_NO')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='RO_NO')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='RO_NO', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='RO_NO'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='RO_NO', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class RO_NO


class SALES_DATE(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SALES_DATE)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SALES_DATE.subclass:
            return SALES_DATE.subclass(*args_, **kwargs_)
        else:
            return SALES_DATE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SALES_DATE', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SALES_DATE')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SALES_DATE')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SALES_DATE', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SALES_DATE'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SALES_DATE', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class SALES_DATE


class SERVICE_EVENT(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SERVICE_EVENT)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SERVICE_EVENT.subclass:
            return SERVICE_EVENT.subclass(*args_, **kwargs_)
        else:
            return SERVICE_EVENT(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SERVICE_EVENT', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SERVICE_EVENT')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SERVICE_EVENT')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SERVICE_EVENT', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SERVICE_EVENT'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SERVICE_EVENT', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class SERVICE_EVENT


class SERVICE_SALE_DETAIL(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MARQUE='', DEALER_BRANCH_ID='', CUST_ID='', CUST_NAME='', CUST_ADDRESS='', CUST_SUBURB='', CUST_STATE='', CUST_POSTCODE='', CUST_PHONE='', CUST_MOBILE='', CUST_EMAIL='', VIN='', VEHICLE_MODEL='', VEHICLE_DELIVERY_DATE='', TRANSIENT_VEHICLE_CODE='', RO_NO='', SALES_DATE='', VEHICLE_MILEAGE='', SERVICE_EVENT='', SERVICE_TYPE='', SERVICE_DESCRIPTION='', SERVICE_ADVISOR_FIRSTNAME='', SERVICE_ADVISOR_LASTNAME='', SERVICE_ADVISOR_BIRTHDATE='', SERVICE_ADVISOR_STAFFCODE='', PURCHASES_TO_DATE=0.0, LAB_HOURS_AVAILABLE='', LAB_HOURS_CLOCKED_R=0.0, LAB_HOURS_CLOCKED_W=0.0, LAB_HOURS_CLOCKED_I=0.0, LAB_HOURS_SOLD_R=0.0, LAB_HOURS_SOLD_W=0.0, LAB_HOURS_SOLD_I=0.0, LAB_VALUE_SOLD_R=0.0, LAB_VALUE_SOLD_W=0.0, LAB_VALUE_SOLD_I=0.0, SUBLET_COUNT_R=0.0, SUBLET_COUNT_W=0.0, SUBLET_COUNT_I=0.0, SUBLET_VALUE_R=0.0, SUBLET_VALUE_W=0.0, SUBLET_VALUE_I=0.0, JOB_COUNT_R='', JOB_COUNT_W='', JOB_COUNT_I='', PART_UNITS_R='', PART_UNITS_W='', PART_UNITS_I='', PART_VALUE_R='', PART_VALUE_W='', PART_VALUE_I='', CONSUMABLES_VALUE=0.0, OTHER_CHARGES='', INVOICE_VALUE=0.0, TOTAL_JOB_COUNT=0.0, JOB=None):
        self.original_tagname_ = None
        self.MARQUE = MARQUE
        #self.validate_MARQUE(self.MARQUE)
        self.DEALER_BRANCH_ID = DEALER_BRANCH_ID
        #self.validate_DEALER_BRANCH_ID(self.DEALER_BRANCH_ID)
        self.CUST_ID = CUST_ID
        self.CUST_NAME = CUST_NAME
        self.CUST_ADDRESS = CUST_ADDRESS
        self.CUST_SUBURB = CUST_SUBURB
        self.CUST_STATE = CUST_STATE
        self.CUST_POSTCODE = CUST_POSTCODE
        self.CUST_PHONE = CUST_PHONE
        self.CUST_MOBILE = CUST_MOBILE
        self.CUST_EMAIL = CUST_EMAIL
        self.VIN = VIN
        #self.validate_VIN(self.VIN)
        self.VEHICLE_MODEL = VEHICLE_MODEL
        #self.validate_VEHICLE_MODEL(self.VEHICLE_MODEL)
        self.VEHICLE_DELIVERY_DATE = VEHICLE_DELIVERY_DATE
        #self.validate_VEHICLE_DELIVERY_DATE(self.VEHICLE_DELIVERY_DATE)
        self.TRANSIENT_VEHICLE_CODE = TRANSIENT_VEHICLE_CODE
        #self.validate_TRANSIENT_VEHICLE_CODE(self.TRANSIENT_VEHICLE_CODE)
        self.RO_NO = RO_NO
        #self.validate_RO_NO(self.RO_NO)
        self.SALES_DATE = SALES_DATE
        #self.validate_SALES_DATE(self.SALES_DATE)
        self.VEHICLE_MILEAGE = VEHICLE_MILEAGE
        #self.validate_VEHICLE_MILEAGE(self.VEHICLE_MILEAGE)
        self.SERVICE_EVENT = SERVICE_EVENT
        #self.validate_SERVICE_EVENT(self.SERVICE_EVENT)
        self.SERVICE_TYPE = SERVICE_TYPE
        #self.validate_SERVICE_TYPE(self.SERVICE_TYPE)
        self.SERVICE_DESCRIPTION = SERVICE_DESCRIPTION
        self.SERVICE_ADVISOR_FIRSTNAME = SERVICE_ADVISOR_FIRSTNAME
        #self.validate_SERVICE_ADVISOR_FIRSTNAME(self.SERVICE_ADVISOR_FIRSTNAME)
        self.SERVICE_ADVISOR_LASTNAME = SERVICE_ADVISOR_LASTNAME
        #self.validate_SERVICE_ADVISOR_LASTNAME(self.SERVICE_ADVISOR_LASTNAME)
        self.SERVICE_ADVISOR_BIRTHDATE = SERVICE_ADVISOR_BIRTHDATE
        #self.validate_SERVICE_ADVISOR_BIRTHDATE(self.SERVICE_ADVISOR_BIRTHDATE)
        self.SERVICE_ADVISOR_STAFFCODE = SERVICE_ADVISOR_STAFFCODE
        #self.validate_SERVICE_ADVISOR_STAFFCODE(self.SERVICE_ADVISOR_STAFFCODE)
        self.PURCHASES_TO_DATE = PURCHASES_TO_DATE
        self.LAB_HOURS_AVAILABLE = LAB_HOURS_AVAILABLE
        self.LAB_HOURS_CLOCKED_R = LAB_HOURS_CLOCKED_R
        self.LAB_HOURS_CLOCKED_W = LAB_HOURS_CLOCKED_W
        self.LAB_HOURS_CLOCKED_I = LAB_HOURS_CLOCKED_I
        self.LAB_HOURS_SOLD_R = LAB_HOURS_SOLD_R
        self.LAB_HOURS_SOLD_W = LAB_HOURS_SOLD_W
        self.LAB_HOURS_SOLD_I = LAB_HOURS_SOLD_I
        self.LAB_VALUE_SOLD_R = LAB_VALUE_SOLD_R
        self.LAB_VALUE_SOLD_W = LAB_VALUE_SOLD_W
        self.LAB_VALUE_SOLD_I = LAB_VALUE_SOLD_I
        self.SUBLET_COUNT_R = SUBLET_COUNT_R
        self.SUBLET_COUNT_W = SUBLET_COUNT_W
        self.SUBLET_COUNT_I = SUBLET_COUNT_I
        self.SUBLET_VALUE_R = SUBLET_VALUE_R
        self.SUBLET_VALUE_W = SUBLET_VALUE_W
        self.SUBLET_VALUE_I = SUBLET_VALUE_I
        self.JOB_COUNT_R = JOB_COUNT_R
        self.JOB_COUNT_W = JOB_COUNT_W
        self.JOB_COUNT_I = JOB_COUNT_I
        self.PART_UNITS_R = PART_UNITS_R
        self.PART_UNITS_W = PART_UNITS_W
        self.PART_UNITS_I = PART_UNITS_I
        self.PART_VALUE_R = PART_VALUE_R
        self.PART_VALUE_W = PART_VALUE_W
        self.PART_VALUE_I = PART_VALUE_I
        self.CONSUMABLES_VALUE = CONSUMABLES_VALUE
        self.OTHER_CHARGES = OTHER_CHARGES
        self.INVOICE_VALUE = INVOICE_VALUE
        self.TOTAL_JOB_COUNT = TOTAL_JOB_COUNT
        if JOB is None:
            self.JOB = []
        else:
            self.JOB = JOB
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SERVICE_SALE_DETAIL)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SERVICE_SALE_DETAIL.subclass:
            return SERVICE_SALE_DETAIL.subclass(*args_, **kwargs_)
        else:
            return SERVICE_SALE_DETAIL(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MARQUE(self): return self.MARQUE
    def set_MARQUE(self, MARQUE): self.MARQUE = MARQUE
    def get_DEALER_BRANCH_ID(self): return self.DEALER_BRANCH_ID
    def set_DEALER_BRANCH_ID(self, DEALER_BRANCH_ID): self.DEALER_BRANCH_ID = DEALER_BRANCH_ID
    def get_CUST_ID(self): return self.CUST_ID
    def set_CUST_ID(self, CUST_ID): self.CUST_ID = CUST_ID
    def get_CUST_NAME(self): return self.CUST_NAME
    def set_CUST_NAME(self, CUST_NAME): self.CUST_NAME = CUST_NAME
    def get_CUST_ADDRESS(self): return self.CUST_ADDRESS
    def set_CUST_ADDRESS(self, CUST_ADDRESS): self.CUST_ADDRESS = CUST_ADDRESS
    def get_CUST_SUBURB(self): return self.CUST_SUBURB
    def set_CUST_SUBURB(self, CUST_SUBURB): self.CUST_SUBURB = CUST_SUBURB
    def get_CUST_STATE(self): return self.CUST_STATE
    def set_CUST_STATE(self, CUST_STATE): self.CUST_STATE = CUST_STATE
    def get_CUST_POSTCODE(self): return self.CUST_POSTCODE
    def set_CUST_POSTCODE(self, CUST_POSTCODE): self.CUST_POSTCODE = CUST_POSTCODE
    def get_CUST_PHONE(self): return self.CUST_PHONE
    def set_CUST_PHONE(self, CUST_PHONE): self.CUST_PHONE = CUST_PHONE
    def get_CUST_MOBILE(self): return self.CUST_MOBILE
    def set_CUST_MOBILE(self, CUST_MOBILE): self.CUST_MOBILE = CUST_MOBILE
    def get_CUST_EMAIL(self): return self.CUST_EMAIL
    def set_CUST_EMAIL(self, CUST_EMAIL): self.CUST_EMAIL = CUST_EMAIL
    def get_VIN(self): return self.VIN
    def set_VIN(self, VIN): self.VIN = VIN
    def get_VEHICLE_MODEL(self): return self.VEHICLE_MODEL
    def set_VEHICLE_MODEL(self, VEHICLE_MODEL): self.VEHICLE_MODEL = VEHICLE_MODEL
    def get_VEHICLE_DELIVERY_DATE(self): return self.VEHICLE_DELIVERY_DATE
    def set_VEHICLE_DELIVERY_DATE(self, VEHICLE_DELIVERY_DATE): self.VEHICLE_DELIVERY_DATE = VEHICLE_DELIVERY_DATE
    def get_TRANSIENT_VEHICLE_CODE(self): return self.TRANSIENT_VEHICLE_CODE
    def set_TRANSIENT_VEHICLE_CODE(self, TRANSIENT_VEHICLE_CODE): self.TRANSIENT_VEHICLE_CODE = TRANSIENT_VEHICLE_CODE
    def get_RO_NO(self): return self.RO_NO
    def set_RO_NO(self, RO_NO): self.RO_NO = RO_NO
    def get_SALES_DATE(self): return self.SALES_DATE
    def set_SALES_DATE(self, SALES_DATE): self.SALES_DATE = SALES_DATE
    def get_VEHICLE_MILEAGE(self): return self.VEHICLE_MILEAGE
    def set_VEHICLE_MILEAGE(self, VEHICLE_MILEAGE): self.VEHICLE_MILEAGE = VEHICLE_MILEAGE
    def get_SERVICE_EVENT(self): return self.SERVICE_EVENT
    def set_SERVICE_EVENT(self, SERVICE_EVENT): self.SERVICE_EVENT = SERVICE_EVENT
    def get_SERVICE_TYPE(self): return self.SERVICE_TYPE
    def set_SERVICE_TYPE(self, SERVICE_TYPE): self.SERVICE_TYPE = SERVICE_TYPE
    def get_SERVICE_DESCRIPTION(self): return self.SERVICE_DESCRIPTION
    def set_SERVICE_DESCRIPTION(self, SERVICE_DESCRIPTION): self.SERVICE_DESCRIPTION = SERVICE_DESCRIPTION
    def get_SERVICE_ADVISOR_FIRSTNAME(self): return self.SERVICE_ADVISOR_FIRSTNAME
    def set_SERVICE_ADVISOR_FIRSTNAME(self, SERVICE_ADVISOR_FIRSTNAME): self.SERVICE_ADVISOR_FIRSTNAME = SERVICE_ADVISOR_FIRSTNAME
    def get_SERVICE_ADVISOR_LASTNAME(self): return self.SERVICE_ADVISOR_LASTNAME
    def set_SERVICE_ADVISOR_LASTNAME(self, SERVICE_ADVISOR_LASTNAME): self.SERVICE_ADVISOR_LASTNAME = SERVICE_ADVISOR_LASTNAME
    def get_SERVICE_ADVISOR_BIRTHDATE(self): return self.SERVICE_ADVISOR_BIRTHDATE
    def set_SERVICE_ADVISOR_BIRTHDATE(self, SERVICE_ADVISOR_BIRTHDATE): self.SERVICE_ADVISOR_BIRTHDATE = SERVICE_ADVISOR_BIRTHDATE
    def get_SERVICE_ADVISOR_STAFFCODE(self): return self.SERVICE_ADVISOR_STAFFCODE
    def set_SERVICE_ADVISOR_STAFFCODE(self, SERVICE_ADVISOR_STAFFCODE): self.SERVICE_ADVISOR_STAFFCODE = SERVICE_ADVISOR_STAFFCODE
    def get_PURCHASES_TO_DATE(self): return self.PURCHASES_TO_DATE
    def set_PURCHASES_TO_DATE(self, PURCHASES_TO_DATE): self.PURCHASES_TO_DATE = PURCHASES_TO_DATE
    def get_LAB_HOURS_AVAILABLE(self): return self.LAB_HOURS_AVAILABLE
    def set_LAB_HOURS_AVAILABLE(self, LAB_HOURS_AVAILABLE): self.LAB_HOURS_AVAILABLE = LAB_HOURS_AVAILABLE
    def get_LAB_HOURS_CLOCKED_R(self): return self.LAB_HOURS_CLOCKED_R
    def set_LAB_HOURS_CLOCKED_R(self, LAB_HOURS_CLOCKED_R): self.LAB_HOURS_CLOCKED_R = LAB_HOURS_CLOCKED_R
    def get_LAB_HOURS_CLOCKED_W(self): return self.LAB_HOURS_CLOCKED_W
    def set_LAB_HOURS_CLOCKED_W(self, LAB_HOURS_CLOCKED_W): self.LAB_HOURS_CLOCKED_W = LAB_HOURS_CLOCKED_W
    def get_LAB_HOURS_CLOCKED_I(self): return self.LAB_HOURS_CLOCKED_I
    def set_LAB_HOURS_CLOCKED_I(self, LAB_HOURS_CLOCKED_I): self.LAB_HOURS_CLOCKED_I = LAB_HOURS_CLOCKED_I
    def get_LAB_HOURS_SOLD_R(self): return self.LAB_HOURS_SOLD_R
    def set_LAB_HOURS_SOLD_R(self, LAB_HOURS_SOLD_R): self.LAB_HOURS_SOLD_R = LAB_HOURS_SOLD_R
    def get_LAB_HOURS_SOLD_W(self): return self.LAB_HOURS_SOLD_W
    def set_LAB_HOURS_SOLD_W(self, LAB_HOURS_SOLD_W): self.LAB_HOURS_SOLD_W = LAB_HOURS_SOLD_W
    def get_LAB_HOURS_SOLD_I(self): return self.LAB_HOURS_SOLD_I
    def set_LAB_HOURS_SOLD_I(self, LAB_HOURS_SOLD_I): self.LAB_HOURS_SOLD_I = LAB_HOURS_SOLD_I
    def get_LAB_VALUE_SOLD_R(self): return self.LAB_VALUE_SOLD_R
    def set_LAB_VALUE_SOLD_R(self, LAB_VALUE_SOLD_R): self.LAB_VALUE_SOLD_R = LAB_VALUE_SOLD_R
    def get_LAB_VALUE_SOLD_W(self): return self.LAB_VALUE_SOLD_W
    def set_LAB_VALUE_SOLD_W(self, LAB_VALUE_SOLD_W): self.LAB_VALUE_SOLD_W = LAB_VALUE_SOLD_W
    def get_LAB_VALUE_SOLD_I(self): return self.LAB_VALUE_SOLD_I
    def set_LAB_VALUE_SOLD_I(self, LAB_VALUE_SOLD_I): self.LAB_VALUE_SOLD_I = LAB_VALUE_SOLD_I
    def get_SUBLET_COUNT_R(self): return self.SUBLET_COUNT_R
    def set_SUBLET_COUNT_R(self, SUBLET_COUNT_R): self.SUBLET_COUNT_R = SUBLET_COUNT_R
    def get_SUBLET_COUNT_W(self): return self.SUBLET_COUNT_W
    def set_SUBLET_COUNT_W(self, SUBLET_COUNT_W): self.SUBLET_COUNT_W = SUBLET_COUNT_W
    def get_SUBLET_COUNT_I(self): return self.SUBLET_COUNT_I
    def set_SUBLET_COUNT_I(self, SUBLET_COUNT_I): self.SUBLET_COUNT_I = SUBLET_COUNT_I
    def get_SUBLET_VALUE_R(self): return self.SUBLET_VALUE_R
    def set_SUBLET_VALUE_R(self, SUBLET_VALUE_R): self.SUBLET_VALUE_R = SUBLET_VALUE_R
    def get_SUBLET_VALUE_W(self): return self.SUBLET_VALUE_W
    def set_SUBLET_VALUE_W(self, SUBLET_VALUE_W): self.SUBLET_VALUE_W = SUBLET_VALUE_W
    def get_SUBLET_VALUE_I(self): return self.SUBLET_VALUE_I
    def set_SUBLET_VALUE_I(self, SUBLET_VALUE_I): self.SUBLET_VALUE_I = SUBLET_VALUE_I
    def get_JOB_COUNT_R(self): return self.JOB_COUNT_R
    def set_JOB_COUNT_R(self, JOB_COUNT_R): self.JOB_COUNT_R = JOB_COUNT_R
    def get_JOB_COUNT_W(self): return self.JOB_COUNT_W
    def set_JOB_COUNT_W(self, JOB_COUNT_W): self.JOB_COUNT_W = JOB_COUNT_W
    def get_JOB_COUNT_I(self): return self.JOB_COUNT_I
    def set_JOB_COUNT_I(self, JOB_COUNT_I): self.JOB_COUNT_I = JOB_COUNT_I
    def get_PART_UNITS_R(self): return self.PART_UNITS_R
    def set_PART_UNITS_R(self, PART_UNITS_R): self.PART_UNITS_R = PART_UNITS_R
    def get_PART_UNITS_W(self): return self.PART_UNITS_W
    def set_PART_UNITS_W(self, PART_UNITS_W): self.PART_UNITS_W = PART_UNITS_W
    def get_PART_UNITS_I(self): return self.PART_UNITS_I
    def set_PART_UNITS_I(self, PART_UNITS_I): self.PART_UNITS_I = PART_UNITS_I
    def get_PART_VALUE_R(self): return self.PART_VALUE_R
    def set_PART_VALUE_R(self, PART_VALUE_R): self.PART_VALUE_R = PART_VALUE_R
    def get_PART_VALUE_W(self): return self.PART_VALUE_W
    def set_PART_VALUE_W(self, PART_VALUE_W): self.PART_VALUE_W = PART_VALUE_W
    def get_PART_VALUE_I(self): return self.PART_VALUE_I
    def set_PART_VALUE_I(self, PART_VALUE_I): self.PART_VALUE_I = PART_VALUE_I
    def get_CONSUMABLES_VALUE(self): return self.CONSUMABLES_VALUE
    def set_CONSUMABLES_VALUE(self, CONSUMABLES_VALUE): self.CONSUMABLES_VALUE = CONSUMABLES_VALUE
    def get_OTHER_CHARGES(self): return self.OTHER_CHARGES
    def set_OTHER_CHARGES(self, OTHER_CHARGES): self.OTHER_CHARGES = OTHER_CHARGES
    def get_INVOICE_VALUE(self): return self.INVOICE_VALUE
    def set_INVOICE_VALUE(self, INVOICE_VALUE): self.INVOICE_VALUE = INVOICE_VALUE
    def get_TOTAL_JOB_COUNT(self): return self.TOTAL_JOB_COUNT
    def set_TOTAL_JOB_COUNT(self, TOTAL_JOB_COUNT): self.TOTAL_JOB_COUNT = TOTAL_JOB_COUNT
    def get_JOB(self): return self.JOB
    def set_JOB(self, JOB): self.JOB = JOB
    def add_JOB(self, value): self.JOB.append(value)
    def insert_JOB_at(self, index, value): self.JOB.insert(index, value)
    def replace_JOB_at(self, index, value): self.JOB[index] = value
    def validate_MARQUE(self, value):
        # Validate type MARQUE, a restriction on xsd:string.
        if value is None or len(value) != 1:
            raise GDSParseError("Length of [MARQUE] should be 1")
        #pass
    def validate_DEALER_BRANCH_ID(self, value):
        # Validate type DEALER_BRANCH_ID, a restriction on xsd:string.
        if value is None or len(value) > 7:
            raise GDSParseError("Length of [DEALER_BRANCH_ID] should not be gt 7")
        pass
    def validate_VIN(self, value):
        # Validate type VIN, a restriction on xsd:string.
        if value is None or len(value) > 25:
            raise GDSParseError("Length of [VIN] should not be gt 25")
        pass
    def validate_VEHICLE_MODEL(self, value):
        # Validate type VEHICLE_MODEL, a restriction on xsd:string.
        if value is None or len(value) > 120:
            raise GDSParseError("Length of [VEHICLE_MODEL] should not be gt 120")
        pass
    def validate_VEHICLE_DELIVERY_DATE(self, value):
        # Validate type VEHICLE_DELIVERY_DATE, a restriction on xsd:string.
        if value is None or len(value) > 6:
            raise GDSParseError("Length of [VEHICLE_DELIVERY_DATE] should not be gt 6")
        pass
    def validate_TRANSIENT_VEHICLE_CODE(self, value):
        # Validate type TRANSIENT_VEHICLE_CODE, a restriction on xsd:string.
        if value is None or len(value) != 1:
            raise GDSParseError("Length of [TRANSIENT_VEHICLE_CODE] should be 1")
        #pass
    def validate_RO_NO(self, value):
        # Validate type RO_NO, a restriction on xsd:string.
        if value is None or len(value) > 40:
            raise GDSParseError("Length of [RO_NO] should not be gt 40")
        pass
    def validate_SALES_DATE(self, value):
        # Validate type SALES_DATE, a restriction on xsd:string.
        if value is None or len(value) > 6:
            raise GDSParseError("Length of [SALES_DATE] should not be gt 6")
        pass
    def validate_VEHICLE_MILEAGE(self, value):
        # Validate type VEHICLE_MILEAGE, a restriction on xsd:string.
        if value is None or len(value) > 8:
            raise GDSParseError("Length of [VEHICLE_MILEAGE] should not be gt 8")
        pass
    def validate_SERVICE_EVENT(self, value):
        # Validate type SERVICE_EVENT, a restriction on xsd:string.
        if value is None or len(value) > 6:
            raise GDSParseError("Length of [SERVICE_EVENT] should not be gt 6")
        pass
    def validate_SERVICE_TYPE(self, value):
        # Validate type SERVICE_TYPE, a restriction on xsd:string.
        if value is None or len(value) > 120:
            raise GDSParseError("Length of [SERVICE_TYPE] should not be gt 120")
        pass
    def validate_SERVICE_ADVISOR_FIRSTNAME(self, value):
        # Validate type SERVICE_ADVISOR_FIRSTNAME, a restriction on xsd:string.
        if value is None or len(value) > 80:
            raise GDSParseError("Length of [SERVICE_ADVISOR_FIRSTNAME] should not be gt 80")
        pass
    def validate_SERVICE_ADVISOR_LASTNAME(self, value):
        # Validate type SERVICE_ADVISOR_LASTNAME, a restriction on xsd:string.
        if value is None or len(value) > 80:
            raise GDSParseError("Length of [SERVICE_ADVISOR_LASTNAME] should not be gt 80")
        pass
    def validate_SERVICE_ADVISOR_BIRTHDATE(self, value):
        # Validate type SERVICE_ADVISOR_BIRTHDATE, a restriction on xsd:string.
        if value is None or len(value) > 8:
            raise GDSParseError("Length of [SERVICE_ADVISOR_BIRTHDATE] should not be gt 8")
        pass
    def validate_SERVICE_ADVISOR_STAFFCODE(self, value):
        # Validate type SERVICE_ADVISOR_STAFFCODE, a restriction on xsd:string.
        if value is None or len(value) > 10:
            raise GDSParseError("Length of [SERVICE_ADVISOR_STAFFCODE] should not be gt 10")
        pass
    def hasContent_(self):
        if (
            self.MARQUE is not None or
            self.DEALER_BRANCH_ID is not None or
            self.CUST_ID is not None or
            self.CUST_NAME is not None or
            self.CUST_ADDRESS is not None or
            self.CUST_SUBURB is not None or
            self.CUST_STATE is not None or
            self.CUST_POSTCODE is not None or
            self.CUST_PHONE is not None or
            self.CUST_MOBILE is not None or
            self.CUST_EMAIL is not None or
            self.VIN is not None or
            self.VEHICLE_MODEL is not None or
            self.VEHICLE_DELIVERY_DATE is not None or
            self.TRANSIENT_VEHICLE_CODE is not None or
            self.RO_NO is not None or
            self.SALES_DATE is not None or
            self.VEHICLE_MILEAGE is not None or
            self.SERVICE_EVENT is not None or
            self.SERVICE_TYPE is not None or
            self.SERVICE_DESCRIPTION is not None or
            self.SERVICE_ADVISOR_FIRSTNAME is not None or
            self.SERVICE_ADVISOR_LASTNAME is not None or
            self.SERVICE_ADVISOR_BIRTHDATE is not None or
            self.SERVICE_ADVISOR_STAFFCODE is not None or
            self.PURCHASES_TO_DATE is not None or
            self.LAB_HOURS_AVAILABLE is not None or
            self.LAB_HOURS_CLOCKED_R is not None or
            self.LAB_HOURS_CLOCKED_W is not None or
            self.LAB_HOURS_CLOCKED_I is not None or
            self.LAB_HOURS_SOLD_R is not None or
            self.LAB_HOURS_SOLD_W is not None or
            self.LAB_HOURS_SOLD_I is not None or
            self.LAB_VALUE_SOLD_R is not None or
            self.LAB_VALUE_SOLD_W is not None or
            self.LAB_VALUE_SOLD_I is not None or
            self.SUBLET_COUNT_R is not None or
            self.SUBLET_COUNT_W is not None or
            self.SUBLET_COUNT_I is not None or
            self.SUBLET_VALUE_R is not None or
            self.SUBLET_VALUE_W is not None or
            self.SUBLET_VALUE_I is not None or
            self.JOB_COUNT_R is not None or
            self.JOB_COUNT_W is not None or
            self.JOB_COUNT_I is not None or
            self.PART_UNITS_R is not None or
            self.PART_UNITS_W is not None or
            self.PART_UNITS_I is not None or
            self.PART_VALUE_R is not None or
            self.PART_VALUE_W is not None or
            self.PART_VALUE_I is not None or
            self.CONSUMABLES_VALUE is not None or
            self.OTHER_CHARGES is not None or
            self.INVOICE_VALUE is not None or
            self.TOTAL_JOB_COUNT is not None or
            self.JOB
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SERVICE_SALE_DETAIL', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SERVICE_SALE_DETAIL')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SERVICE_SALE_DETAIL')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SERVICE_SALE_DETAIL', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SERVICE_SALE_DETAIL'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SERVICE_SALE_DETAIL', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MARQUE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMARQUE>%s</%sMARQUE>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MARQUE), input_name='MARQUE')), namespace_, eol_))
        if self.DEALER_BRANCH_ID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDEALER_BRANCH_ID>%s</%sDEALER_BRANCH_ID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DEALER_BRANCH_ID), input_name='DEALER_BRANCH_ID')), namespace_, eol_))
        if self.CUST_ID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCUST_ID>%s</%sCUST_ID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CUST_ID), input_name='CUST_ID')), namespace_, eol_))
        if self.CUST_NAME is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCUST_NAME>%s</%sCUST_NAME>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CUST_NAME), input_name='CUST_NAME')), namespace_, eol_))
        if self.CUST_ADDRESS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCUST_ADDRESS>%s</%sCUST_ADDRESS>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CUST_ADDRESS), input_name='CUST_ADDRESS')), namespace_, eol_))
        if self.CUST_SUBURB is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCUST_SUBURB>%s</%sCUST_SUBURB>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CUST_SUBURB), input_name='CUST_SUBURB')), namespace_, eol_))
        if self.CUST_STATE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCUST_STATE>%s</%sCUST_STATE>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CUST_STATE), input_name='CUST_STATE')), namespace_, eol_))
        if self.CUST_POSTCODE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCUST_POSTCODE>%s</%sCUST_POSTCODE>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CUST_POSTCODE), input_name='CUST_POSTCODE')), namespace_, eol_))
        if self.CUST_PHONE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCUST_PHONE>%s</%sCUST_PHONE>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CUST_PHONE), input_name='CUST_PHONE')), namespace_, eol_))
        if self.CUST_MOBILE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCUST_MOBILE>%s</%sCUST_MOBILE>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CUST_MOBILE), input_name='CUST_MOBILE')), namespace_, eol_))
        if self.CUST_EMAIL is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCUST_EMAIL>%s</%sCUST_EMAIL>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CUST_EMAIL), input_name='CUST_EMAIL')), namespace_, eol_))
        if self.VIN is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVIN>%s</%sVIN>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.VIN), input_name='VIN')), namespace_, eol_))
        if self.VEHICLE_MODEL is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVEHICLE_MODEL>%s</%sVEHICLE_MODEL>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.VEHICLE_MODEL), input_name='VEHICLE_MODEL')), namespace_, eol_))
        if self.VEHICLE_DELIVERY_DATE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVEHICLE_DELIVERY_DATE>%s</%sVEHICLE_DELIVERY_DATE>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.VEHICLE_DELIVERY_DATE), input_name='VEHICLE_DELIVERY_DATE')), namespace_, eol_))
        if self.TRANSIENT_VEHICLE_CODE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTRANSIENT_VEHICLE_CODE>%s</%sTRANSIENT_VEHICLE_CODE>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.TRANSIENT_VEHICLE_CODE), input_name='TRANSIENT_VEHICLE_CODE')), namespace_, eol_))
        if self.RO_NO is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRO_NO>%s</%sRO_NO>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RO_NO), input_name='RO_NO')), namespace_, eol_))
        if self.SALES_DATE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSALES_DATE>%s</%sSALES_DATE>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SALES_DATE), input_name='SALES_DATE')), namespace_, eol_))
        if self.VEHICLE_MILEAGE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sVEHICLE_MILEAGE>%s</%sVEHICLE_MILEAGE>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.VEHICLE_MILEAGE), input_name='VEHICLE_MILEAGE')), namespace_, eol_))
        if self.SERVICE_EVENT is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSERVICE_EVENT>%s</%sSERVICE_EVENT>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SERVICE_EVENT), input_name='SERVICE_EVENT')), namespace_, eol_))
        if self.SERVICE_TYPE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSERVICE_TYPE>%s</%sSERVICE_TYPE>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SERVICE_TYPE), input_name='SERVICE_TYPE')), namespace_, eol_))
        if self.SERVICE_DESCRIPTION is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSERVICE_DESCRIPTION>%s</%sSERVICE_DESCRIPTION>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SERVICE_DESCRIPTION), input_name='SERVICE_DESCRIPTION')), namespace_, eol_))
        if self.SERVICE_ADVISOR_FIRSTNAME is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSERVICE_ADVISOR_FIRSTNAME>%s</%sSERVICE_ADVISOR_FIRSTNAME>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SERVICE_ADVISOR_FIRSTNAME), input_name='SERVICE_ADVISOR_FIRSTNAME')), namespace_, eol_))
        if self.SERVICE_ADVISOR_LASTNAME is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSERVICE_ADVISOR_LASTNAME>%s</%sSERVICE_ADVISOR_LASTNAME>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SERVICE_ADVISOR_LASTNAME), input_name='SERVICE_ADVISOR_LASTNAME')), namespace_, eol_))
        if self.SERVICE_ADVISOR_BIRTHDATE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSERVICE_ADVISOR_BIRTHDATE>%s</%sSERVICE_ADVISOR_BIRTHDATE>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SERVICE_ADVISOR_BIRTHDATE), input_name='SERVICE_ADVISOR_BIRTHDATE')), namespace_, eol_))
        if self.SERVICE_ADVISOR_STAFFCODE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSERVICE_ADVISOR_STAFFCODE>%s</%sSERVICE_ADVISOR_STAFFCODE>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SERVICE_ADVISOR_STAFFCODE), input_name='SERVICE_ADVISOR_STAFFCODE')), namespace_, eol_))
        if self.PURCHASES_TO_DATE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPURCHASES_TO_DATE>%s</%sPURCHASES_TO_DATE>%s' % (namespace_, self.gds_format_float(self.PURCHASES_TO_DATE, input_name='PURCHASES_TO_DATE'), namespace_, eol_))
        if self.LAB_HOURS_AVAILABLE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLAB_HOURS_AVAILABLE>%s</%sLAB_HOURS_AVAILABLE>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.LAB_HOURS_AVAILABLE), input_name='LAB_HOURS_AVAILABLE')), namespace_, eol_))
        if self.LAB_HOURS_CLOCKED_R is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLAB_HOURS_CLOCKED_R>%s</%sLAB_HOURS_CLOCKED_R>%s' % (namespace_, self.gds_format_float(self.LAB_HOURS_CLOCKED_R, input_name='LAB_HOURS_CLOCKED_R'), namespace_, eol_))
        if self.LAB_HOURS_CLOCKED_W is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLAB_HOURS_CLOCKED_W>%s</%sLAB_HOURS_CLOCKED_W>%s' % (namespace_, self.gds_format_float(self.LAB_HOURS_CLOCKED_W, input_name='LAB_HOURS_CLOCKED_W'), namespace_, eol_))
        if self.LAB_HOURS_CLOCKED_I is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLAB_HOURS_CLOCKED_I>%s</%sLAB_HOURS_CLOCKED_I>%s' % (namespace_, self.gds_format_float(self.LAB_HOURS_CLOCKED_I, input_name='LAB_HOURS_CLOCKED_I'), namespace_, eol_))
        if self.LAB_HOURS_SOLD_R is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLAB_HOURS_SOLD_R>%s</%sLAB_HOURS_SOLD_R>%s' % (namespace_, self.gds_format_float(self.LAB_HOURS_SOLD_R, input_name='LAB_HOURS_SOLD_R'), namespace_, eol_))
        if self.LAB_HOURS_SOLD_W is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLAB_HOURS_SOLD_W>%s</%sLAB_HOURS_SOLD_W>%s' % (namespace_, self.gds_format_double(self.LAB_HOURS_SOLD_W, input_name='LAB_HOURS_SOLD_W'), namespace_, eol_))
        if self.LAB_HOURS_SOLD_I is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLAB_HOURS_SOLD_I>%s</%sLAB_HOURS_SOLD_I>%s' % (namespace_, self.gds_format_float(self.LAB_HOURS_SOLD_I, input_name='LAB_HOURS_SOLD_I'), namespace_, eol_))
        if self.LAB_VALUE_SOLD_R is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLAB_VALUE_SOLD_R>%s</%sLAB_VALUE_SOLD_R>%s' % (namespace_, self.gds_format_float(self.LAB_VALUE_SOLD_R, input_name='LAB_VALUE_SOLD_R'), namespace_, eol_))
        if self.LAB_VALUE_SOLD_W is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLAB_VALUE_SOLD_W>%s</%sLAB_VALUE_SOLD_W>%s' % (namespace_, self.gds_format_double(self.LAB_VALUE_SOLD_W, input_name='LAB_VALUE_SOLD_W'), namespace_, eol_))
        if self.LAB_VALUE_SOLD_I is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLAB_VALUE_SOLD_I>%s</%sLAB_VALUE_SOLD_I>%s' % (namespace_, self.gds_format_float(self.LAB_VALUE_SOLD_I, input_name='LAB_VALUE_SOLD_I'), namespace_, eol_))
        if self.SUBLET_COUNT_R is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSUBLET_COUNT_R>%s</%sSUBLET_COUNT_R>%s' % (namespace_, self.gds_format_float(self.SUBLET_COUNT_R, input_name='SUBLET_COUNT_R'), namespace_, eol_))
        if self.SUBLET_COUNT_W is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSUBLET_COUNT_W>%s</%sSUBLET_COUNT_W>%s' % (namespace_, self.gds_format_float(self.SUBLET_COUNT_W, input_name='SUBLET_COUNT_W'), namespace_, eol_))
        if self.SUBLET_COUNT_I is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSUBLET_COUNT_I>%s</%sSUBLET_COUNT_I>%s' % (namespace_, self.gds_format_float(self.SUBLET_COUNT_I, input_name='SUBLET_COUNT_I'), namespace_, eol_))
        if self.SUBLET_VALUE_R is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSUBLET_VALUE_R>%s</%sSUBLET_VALUE_R>%s' % (namespace_, self.gds_format_float(self.SUBLET_VALUE_R, input_name='SUBLET_VALUE_R'), namespace_, eol_))
        if self.SUBLET_VALUE_W is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSUBLET_VALUE_W>%s</%sSUBLET_VALUE_W>%s' % (namespace_, self.gds_format_float(self.SUBLET_VALUE_W, input_name='SUBLET_VALUE_W'), namespace_, eol_))
        if self.SUBLET_VALUE_I is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSUBLET_VALUE_I>%s</%sSUBLET_VALUE_I>%s' % (namespace_, self.gds_format_float(self.SUBLET_VALUE_I, input_name='SUBLET_VALUE_I'), namespace_, eol_))
        if self.JOB_COUNT_R is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJOB_COUNT_R>%s</%sJOB_COUNT_R>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.JOB_COUNT_R), input_name='JOB_COUNT_R')), namespace_, eol_))
        if self.JOB_COUNT_W is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJOB_COUNT_W>%s</%sJOB_COUNT_W>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.JOB_COUNT_W), input_name='JOB_COUNT_W')), namespace_, eol_))
        if self.JOB_COUNT_I is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJOB_COUNT_I>%s</%sJOB_COUNT_I>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.JOB_COUNT_I), input_name='JOB_COUNT_I')), namespace_, eol_))
        if self.PART_UNITS_R is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPART_UNITS_R>%s</%sPART_UNITS_R>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PART_UNITS_R), input_name='PART_UNITS_R')), namespace_, eol_))
        if self.PART_UNITS_W is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPART_UNITS_W>%s</%sPART_UNITS_W>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PART_UNITS_W), input_name='PART_UNITS_W')), namespace_, eol_))
        if self.PART_UNITS_I is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPART_UNITS_I>%s</%sPART_UNITS_I>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PART_UNITS_I), input_name='PART_UNITS_I')), namespace_, eol_))
        if self.PART_VALUE_R is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPART_VALUE_R>%s</%sPART_VALUE_R>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PART_VALUE_R), input_name='PART_VALUE_R')), namespace_, eol_))
        if self.PART_VALUE_W is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPART_VALUE_W>%s</%sPART_VALUE_W>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PART_VALUE_W), input_name='PART_VALUE_W')), namespace_, eol_))
        if self.PART_VALUE_I is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPART_VALUE_I>%s</%sPART_VALUE_I>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PART_VALUE_I), input_name='PART_VALUE_I')), namespace_, eol_))
        if self.CONSUMABLES_VALUE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCONSUMABLES_VALUE>%s</%sCONSUMABLES_VALUE>%s' % (namespace_, self.gds_format_double(self.CONSUMABLES_VALUE, input_name='CONSUMABLES_VALUE'), namespace_, eol_))
        if self.OTHER_CHARGES is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sOTHER_CHARGES>%s</%sOTHER_CHARGES>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.OTHER_CHARGES), input_name='OTHER_CHARGES')), namespace_, eol_))
        if self.INVOICE_VALUE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sINVOICE_VALUE>%s</%sINVOICE_VALUE>%s' % (namespace_, self.gds_format_float(self.INVOICE_VALUE, input_name='INVOICE_VALUE'), namespace_, eol_))
        if self.TOTAL_JOB_COUNT is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTOTAL_JOB_COUNT>%s</%sTOTAL_JOB_COUNT>%s' % (namespace_, self.gds_format_double(self.TOTAL_JOB_COUNT, input_name='TOTAL_JOB_COUNT'), namespace_, eol_))
        for JOB_ in self.JOB:
            JOB_.export(outfile, level, namespace_, name_='JOB', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MARQUE':
            MARQUE_ = child_.text
            MARQUE_ = self.gds_validate_string(MARQUE_, node, 'MARQUE')
            self.MARQUE = MARQUE_
            # validate type MARQUE
            self.validate_MARQUE(self.MARQUE)
        elif nodeName_ == 'DEALER_BRANCH_ID':
            DEALER_BRANCH_ID_ = child_.text
            DEALER_BRANCH_ID_ = self.gds_validate_string(DEALER_BRANCH_ID_, node, 'DEALER_BRANCH_ID')
            self.DEALER_BRANCH_ID = DEALER_BRANCH_ID_
            # validate type DEALER_BRANCH_ID
            self.validate_DEALER_BRANCH_ID(self.DEALER_BRANCH_ID)
        elif nodeName_ == 'CUST_ID':
            CUST_ID_ = child_.text
            CUST_ID_ = self.gds_validate_string(CUST_ID_, node, 'CUST_ID')
            self.CUST_ID = CUST_ID_
        elif nodeName_ == 'CUST_NAME':
            CUST_NAME_ = child_.text
            CUST_NAME_ = self.gds_validate_string(CUST_NAME_, node, 'CUST_NAME')
            self.CUST_NAME = CUST_NAME_
        elif nodeName_ == 'CUST_ADDRESS':
            CUST_ADDRESS_ = child_.text
            CUST_ADDRESS_ = self.gds_validate_string(CUST_ADDRESS_, node, 'CUST_ADDRESS')
            self.CUST_ADDRESS = CUST_ADDRESS_
        elif nodeName_ == 'CUST_SUBURB':
            CUST_SUBURB_ = child_.text
            CUST_SUBURB_ = self.gds_validate_string(CUST_SUBURB_, node, 'CUST_SUBURB')
            self.CUST_SUBURB = CUST_SUBURB_
        elif nodeName_ == 'CUST_STATE':
            CUST_STATE_ = child_.text
            CUST_STATE_ = self.gds_validate_string(CUST_STATE_, node, 'CUST_STATE')
            self.CUST_STATE = CUST_STATE_
        elif nodeName_ == 'CUST_POSTCODE':
            CUST_POSTCODE_ = child_.text
            CUST_POSTCODE_ = self.gds_validate_string(CUST_POSTCODE_, node, 'CUST_POSTCODE')
            self.CUST_POSTCODE = CUST_POSTCODE_
        elif nodeName_ == 'CUST_PHONE':
            CUST_PHONE_ = child_.text
            CUST_PHONE_ = self.gds_validate_string(CUST_PHONE_, node, 'CUST_PHONE')
            self.CUST_PHONE = CUST_PHONE_
        elif nodeName_ == 'CUST_MOBILE':
            CUST_MOBILE_ = child_.text
            CUST_MOBILE_ = self.gds_validate_string(CUST_MOBILE_, node, 'CUST_MOBILE')
            self.CUST_MOBILE = CUST_MOBILE_
        elif nodeName_ == 'CUST_EMAIL':
            CUST_EMAIL_ = child_.text
            CUST_EMAIL_ = self.gds_validate_string(CUST_EMAIL_, node, 'CUST_EMAIL')
            self.CUST_EMAIL = CUST_EMAIL_
        elif nodeName_ == 'VIN':
            VIN_ = child_.text
            VIN_ = self.gds_validate_string(VIN_, node, 'VIN')
            self.VIN = VIN_
            # validate type VIN
            self.validate_VIN(self.VIN)
        elif nodeName_ == 'VEHICLE_MODEL':
            VEHICLE_MODEL_ = child_.text
            VEHICLE_MODEL_ = self.gds_validate_string(VEHICLE_MODEL_, node, 'VEHICLE_MODEL')
            self.VEHICLE_MODEL = VEHICLE_MODEL_
            # validate type VEHICLE_MODEL
            self.validate_VEHICLE_MODEL(self.VEHICLE_MODEL)
        elif nodeName_ == 'VEHICLE_DELIVERY_DATE':
            VEHICLE_DELIVERY_DATE_ = child_.text
            VEHICLE_DELIVERY_DATE_ = self.gds_validate_string(VEHICLE_DELIVERY_DATE_, node, 'VEHICLE_DELIVERY_DATE')
            self.VEHICLE_DELIVERY_DATE = VEHICLE_DELIVERY_DATE_
            # validate type VEHICLE_DELIVERY_DATE
            self.validate_VEHICLE_DELIVERY_DATE(self.VEHICLE_DELIVERY_DATE)
        elif nodeName_ == 'TRANSIENT_VEHICLE_CODE':
            TRANSIENT_VEHICLE_CODE_ = child_.text
            TRANSIENT_VEHICLE_CODE_ = self.gds_validate_string(TRANSIENT_VEHICLE_CODE_, node, 'TRANSIENT_VEHICLE_CODE')
            self.TRANSIENT_VEHICLE_CODE = TRANSIENT_VEHICLE_CODE_
            # validate type TRANSIENT_VEHICLE_CODE
            self.validate_TRANSIENT_VEHICLE_CODE(self.TRANSIENT_VEHICLE_CODE)
        elif nodeName_ == 'RO_NO':
            RO_NO_ = child_.text
            RO_NO_ = self.gds_validate_string(RO_NO_, node, 'RO_NO')
            self.RO_NO = RO_NO_
            # validate type RO_NO
            self.validate_RO_NO(self.RO_NO)
        elif nodeName_ == 'SALES_DATE':
            SALES_DATE_ = child_.text
            SALES_DATE_ = self.gds_validate_string(SALES_DATE_, node, 'SALES_DATE')
            self.SALES_DATE = SALES_DATE_
            # validate type SALES_DATE
            self.validate_SALES_DATE(self.SALES_DATE)
        elif nodeName_ == 'VEHICLE_MILEAGE':
            VEHICLE_MILEAGE_ = child_.text
            VEHICLE_MILEAGE_ = self.gds_validate_string(VEHICLE_MILEAGE_, node, 'VEHICLE_MILEAGE')
            self.VEHICLE_MILEAGE = VEHICLE_MILEAGE_
            # validate type VEHICLE_MILEAGE
            self.validate_VEHICLE_MILEAGE(self.VEHICLE_MILEAGE)
        elif nodeName_ == 'SERVICE_EVENT':
            SERVICE_EVENT_ = child_.text
            SERVICE_EVENT_ = self.gds_validate_string(SERVICE_EVENT_, node, 'SERVICE_EVENT')
            self.SERVICE_EVENT = SERVICE_EVENT_
            # validate type SERVICE_EVENT
            self.validate_SERVICE_EVENT(self.SERVICE_EVENT)
        elif nodeName_ == 'SERVICE_TYPE':
            SERVICE_TYPE_ = child_.text
            SERVICE_TYPE_ = self.gds_validate_string(SERVICE_TYPE_, node, 'SERVICE_TYPE')
            self.SERVICE_TYPE = SERVICE_TYPE_
            # validate type SERVICE_TYPE
            self.validate_SERVICE_TYPE(self.SERVICE_TYPE)
        elif nodeName_ == 'SERVICE_DESCRIPTION':
            SERVICE_DESCRIPTION_ = child_.text
            SERVICE_DESCRIPTION_ = self.gds_validate_string(SERVICE_DESCRIPTION_, node, 'SERVICE_DESCRIPTION')
            self.SERVICE_DESCRIPTION = SERVICE_DESCRIPTION_
        elif nodeName_ == 'SERVICE_ADVISOR_FIRSTNAME':
            SERVICE_ADVISOR_FIRSTNAME_ = child_.text
            SERVICE_ADVISOR_FIRSTNAME_ = self.gds_validate_string(SERVICE_ADVISOR_FIRSTNAME_, node, 'SERVICE_ADVISOR_FIRSTNAME')
            self.SERVICE_ADVISOR_FIRSTNAME = SERVICE_ADVISOR_FIRSTNAME_
            # validate type SERVICE_ADVISOR_FIRSTNAME
            self.validate_SERVICE_ADVISOR_FIRSTNAME(self.SERVICE_ADVISOR_FIRSTNAME)
        elif nodeName_ == 'SERVICE_ADVISOR_LASTNAME':
            SERVICE_ADVISOR_LASTNAME_ = child_.text
            SERVICE_ADVISOR_LASTNAME_ = self.gds_validate_string(SERVICE_ADVISOR_LASTNAME_, node, 'SERVICE_ADVISOR_LASTNAME')
            self.SERVICE_ADVISOR_LASTNAME = SERVICE_ADVISOR_LASTNAME_
            # validate type SERVICE_ADVISOR_LASTNAME
            self.validate_SERVICE_ADVISOR_LASTNAME(self.SERVICE_ADVISOR_LASTNAME)
        elif nodeName_ == 'SERVICE_ADVISOR_BIRTHDATE':
            SERVICE_ADVISOR_BIRTHDATE_ = child_.text
            SERVICE_ADVISOR_BIRTHDATE_ = self.gds_validate_string(SERVICE_ADVISOR_BIRTHDATE_, node, 'SERVICE_ADVISOR_BIRTHDATE')
            self.SERVICE_ADVISOR_BIRTHDATE = SERVICE_ADVISOR_BIRTHDATE_
            # validate type SERVICE_ADVISOR_BIRTHDATE
            self.validate_SERVICE_ADVISOR_BIRTHDATE(self.SERVICE_ADVISOR_BIRTHDATE)
        elif nodeName_ == 'SERVICE_ADVISOR_STAFFCODE':
            SERVICE_ADVISOR_STAFFCODE_ = child_.text
            SERVICE_ADVISOR_STAFFCODE_ = self.gds_validate_string(SERVICE_ADVISOR_STAFFCODE_, node, 'SERVICE_ADVISOR_STAFFCODE')
            self.SERVICE_ADVISOR_STAFFCODE = SERVICE_ADVISOR_STAFFCODE_
            # validate type SERVICE_ADVISOR_STAFFCODE
            self.validate_SERVICE_ADVISOR_STAFFCODE(self.SERVICE_ADVISOR_STAFFCODE)
        elif nodeName_ == 'PURCHASES_TO_DATE':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'PURCHASES_TO_DATE')
            self.PURCHASES_TO_DATE = fval_
        elif nodeName_ == 'LAB_HOURS_AVAILABLE':
            LAB_HOURS_AVAILABLE_ = child_.text
            LAB_HOURS_AVAILABLE_ = self.gds_validate_string(LAB_HOURS_AVAILABLE_, node, 'LAB_HOURS_AVAILABLE')
            self.LAB_HOURS_AVAILABLE = LAB_HOURS_AVAILABLE_
        elif nodeName_ == 'LAB_HOURS_CLOCKED_R':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LAB_HOURS_CLOCKED_R')
            self.LAB_HOURS_CLOCKED_R = fval_
        elif nodeName_ == 'LAB_HOURS_CLOCKED_W':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LAB_HOURS_CLOCKED_W')
            self.LAB_HOURS_CLOCKED_W = fval_
        elif nodeName_ == 'LAB_HOURS_CLOCKED_I':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LAB_HOURS_CLOCKED_I')
            self.LAB_HOURS_CLOCKED_I = fval_
        elif nodeName_ == 'LAB_HOURS_SOLD_R':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LAB_HOURS_SOLD_R')
            self.LAB_HOURS_SOLD_R = fval_
        elif nodeName_ == 'LAB_HOURS_SOLD_W':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LAB_HOURS_SOLD_W')
            self.LAB_HOURS_SOLD_W = fval_
        elif nodeName_ == 'LAB_HOURS_SOLD_I':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LAB_HOURS_SOLD_I')
            self.LAB_HOURS_SOLD_I = fval_
        elif nodeName_ == 'LAB_VALUE_SOLD_R':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LAB_VALUE_SOLD_R')
            self.LAB_VALUE_SOLD_R = fval_
        elif nodeName_ == 'LAB_VALUE_SOLD_W':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LAB_VALUE_SOLD_W')
            self.LAB_VALUE_SOLD_W = fval_
        elif nodeName_ == 'LAB_VALUE_SOLD_I':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'LAB_VALUE_SOLD_I')
            self.LAB_VALUE_SOLD_I = fval_
        elif nodeName_ == 'SUBLET_COUNT_R':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SUBLET_COUNT_R')
            self.SUBLET_COUNT_R = fval_
        elif nodeName_ == 'SUBLET_COUNT_W':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SUBLET_COUNT_W')
            self.SUBLET_COUNT_W = fval_
        elif nodeName_ == 'SUBLET_COUNT_I':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SUBLET_COUNT_I')
            self.SUBLET_COUNT_I = fval_
        elif nodeName_ == 'SUBLET_VALUE_R':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SUBLET_VALUE_R')
            self.SUBLET_VALUE_R = fval_
        elif nodeName_ == 'SUBLET_VALUE_W':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SUBLET_VALUE_W')
            self.SUBLET_VALUE_W = fval_
        elif nodeName_ == 'SUBLET_VALUE_I':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'SUBLET_VALUE_I')
            self.SUBLET_VALUE_I = fval_
        elif nodeName_ == 'JOB_COUNT_R':
            JOB_COUNT_R_ = child_.text
            JOB_COUNT_R_ = self.gds_validate_string(JOB_COUNT_R_, node, 'JOB_COUNT_R')
            self.JOB_COUNT_R = JOB_COUNT_R_
        elif nodeName_ == 'JOB_COUNT_W':
            JOB_COUNT_W_ = child_.text
            JOB_COUNT_W_ = self.gds_validate_string(JOB_COUNT_W_, node, 'JOB_COUNT_W')
            self.JOB_COUNT_W = JOB_COUNT_W_
        elif nodeName_ == 'JOB_COUNT_I':
            JOB_COUNT_I_ = child_.text
            JOB_COUNT_I_ = self.gds_validate_string(JOB_COUNT_I_, node, 'JOB_COUNT_I')
            self.JOB_COUNT_I = JOB_COUNT_I_
        elif nodeName_ == 'PART_UNITS_R':
            PART_UNITS_R_ = child_.text
            PART_UNITS_R_ = self.gds_validate_string(PART_UNITS_R_, node, 'PART_UNITS_R')
            self.PART_UNITS_R = PART_UNITS_R_
        elif nodeName_ == 'PART_UNITS_W':
            PART_UNITS_W_ = child_.text
            PART_UNITS_W_ = self.gds_validate_string(PART_UNITS_W_, node, 'PART_UNITS_W')
            self.PART_UNITS_W = PART_UNITS_W_
        elif nodeName_ == 'PART_UNITS_I':
            PART_UNITS_I_ = child_.text
            PART_UNITS_I_ = self.gds_validate_string(PART_UNITS_I_, node, 'PART_UNITS_I')
            self.PART_UNITS_I = PART_UNITS_I_
        elif nodeName_ == 'PART_VALUE_R':
            PART_VALUE_R_ = child_.text
            PART_VALUE_R_ = self.gds_validate_string(PART_VALUE_R_, node, 'PART_VALUE_R')
            self.PART_VALUE_R = PART_VALUE_R_
        elif nodeName_ == 'PART_VALUE_W':
            PART_VALUE_W_ = child_.text
            PART_VALUE_W_ = self.gds_validate_string(PART_VALUE_W_, node, 'PART_VALUE_W')
            self.PART_VALUE_W = PART_VALUE_W_
        elif nodeName_ == 'PART_VALUE_I':
            PART_VALUE_I_ = child_.text
            PART_VALUE_I_ = self.gds_validate_string(PART_VALUE_I_, node, 'PART_VALUE_I')
            self.PART_VALUE_I = PART_VALUE_I_
        elif nodeName_ == 'CONSUMABLES_VALUE':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'CONSUMABLES_VALUE')
            self.CONSUMABLES_VALUE = fval_
        elif nodeName_ == 'OTHER_CHARGES':
            OTHER_CHARGES_ = child_.text
            OTHER_CHARGES_ = self.gds_validate_string(OTHER_CHARGES_, node, 'OTHER_CHARGES')
            self.OTHER_CHARGES = OTHER_CHARGES_
        elif nodeName_ == 'INVOICE_VALUE':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'INVOICE_VALUE')
            self.INVOICE_VALUE = fval_
        elif nodeName_ == 'TOTAL_JOB_COUNT':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TOTAL_JOB_COUNT')
            self.TOTAL_JOB_COUNT = fval_
        elif nodeName_ == 'JOB':
            obj_ = JOB.factory()
            obj_.build(child_)
            self.JOB.append(obj_)
            obj_.original_tagname_ = 'JOB'
# end class SERVICE_SALE_DETAIL


class SERVICE_SALE_CONTROL(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TOTAL_RECORDS=None, TOTAL_INVOICE_VALUE=None):
        self.original_tagname_ = None
        self.TOTAL_RECORDS = TOTAL_RECORDS
        self.TOTAL_INVOICE_VALUE = TOTAL_INVOICE_VALUE
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SERVICE_SALE_CONTROL)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SERVICE_SALE_CONTROL.subclass:
            return SERVICE_SALE_CONTROL.subclass(*args_, **kwargs_)
        else:
            return SERVICE_SALE_CONTROL(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TOTAL_RECORDS(self): return self.TOTAL_RECORDS
    def set_TOTAL_RECORDS(self, TOTAL_RECORDS): self.TOTAL_RECORDS = TOTAL_RECORDS
    def get_TOTAL_INVOICE_VALUE(self): return self.TOTAL_INVOICE_VALUE
    def set_TOTAL_INVOICE_VALUE(self, TOTAL_INVOICE_VALUE): self.TOTAL_INVOICE_VALUE = TOTAL_INVOICE_VALUE
    def hasContent_(self):
        if (
            self.TOTAL_RECORDS is not None or
            self.TOTAL_INVOICE_VALUE is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SERVICE_SALE_CONTROL', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SERVICE_SALE_CONTROL')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SERVICE_SALE_CONTROL')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SERVICE_SALE_CONTROL', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SERVICE_SALE_CONTROL'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SERVICE_SALE_CONTROL', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TOTAL_RECORDS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTOTAL_RECORDS>%s</%sTOTAL_RECORDS>%s' % (namespace_, self.gds_format_float(self.TOTAL_RECORDS, input_name='TOTAL_RECORDS'), namespace_, eol_))
        if self.TOTAL_INVOICE_VALUE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTOTAL_INVOICE_VALUE>%s</%sTOTAL_INVOICE_VALUE>%s' % (namespace_, self.gds_format_float(self.TOTAL_INVOICE_VALUE, input_name='TOTAL_INVOICE_VALUE'), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TOTAL_RECORDS':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TOTAL_RECORDS')
            self.TOTAL_RECORDS = fval_
        elif nodeName_ == 'TOTAL_INVOICE_VALUE':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TOTAL_INVOICE_VALUE')
            self.TOTAL_INVOICE_VALUE = fval_
# end class SERVICE_SALE_CONTROL


class SERVICE_SALE_HEADER(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SESSION_ID=None, DEALER_ID=None, DATA_DATE=None, DEALER_SYSTEM=None, EXTRACTION_DATE=None):
        self.original_tagname_ = None
        self.SESSION_ID = SESSION_ID
        #self.validate_SESSION_ID(self.SESSION_ID)
        self.DEALER_ID = DEALER_ID
        #self.validate_DEALER_ID(self.DEALER_ID)
        self.DATA_DATE = DATA_DATE
        #self.validate_DATA_DATE(self.DATA_DATE)
        self.DEALER_SYSTEM = DEALER_SYSTEM
        #self.validate_DEALER_SYSTEM(self.DEALER_SYSTEM)
        self.EXTRACTION_DATE = EXTRACTION_DATE
        #self.validate_EXTRACTION_DATE(self.EXTRACTION_DATE)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SERVICE_SALE_HEADER)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SERVICE_SALE_HEADER.subclass:
            return SERVICE_SALE_HEADER.subclass(*args_, **kwargs_)
        else:
            return SERVICE_SALE_HEADER(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SESSION_ID(self): return self.SESSION_ID
    def set_SESSION_ID(self, SESSION_ID): self.SESSION_ID = SESSION_ID
    def get_DEALER_ID(self): return self.DEALER_ID
    def set_DEALER_ID(self, DEALER_ID): self.DEALER_ID = DEALER_ID
    def get_DATA_DATE(self): return self.DATA_DATE
    def set_DATA_DATE(self, DATA_DATE): self.DATA_DATE = DATA_DATE
    def get_DEALER_SYSTEM(self): return self.DEALER_SYSTEM
    def set_DEALER_SYSTEM(self, DEALER_SYSTEM): self.DEALER_SYSTEM = DEALER_SYSTEM
    def get_EXTRACTION_DATE(self): return self.EXTRACTION_DATE
    def set_EXTRACTION_DATE(self, EXTRACTION_DATE): self.EXTRACTION_DATE = EXTRACTION_DATE
    def validate_SESSION_ID(self, value):
        # Validate type SESSION_ID, a restriction on xsd:string.
        if value is None or len(value) > 50:
            raise GDSParseError("Length of [SESSION_ID] should not be gt 50")
        pass
    def validate_DEALER_ID(self, value):
        # Validate type DEALER_ID, a restriction on xsd:string.
        if value is None or len(value) < 3 or len(value) > 6:
            raise GDSParseError('Length of [DEALER_ID] should be 3-6')
        pass
    def validate_DATA_DATE(self, value):
        # Validate type DATA_DATE, a restriction on xsd:string.
        if value is None or len(value) > 6:
            raise GDSParseError("Length of [DATA_DATE] should not be gt 6")
        pass
    def validate_DEALER_SYSTEM(self, value):
        # Validate type DEALER_SYSTEM, a restriction on xsd:string.
        if value is None or len(value) > 80:
            raise GDSParseError("Length of [DEALER_SYSTEM] should not be gt 80")
        pass
    def validate_EXTRACTION_DATE(self, value):
        # Validate type EXTRACTION_DATE, a restriction on xsd:string.
        if value is None or len(value) > 6:
            raise GDSParseError("Length of [EXTRACTION_DATE] should not be gt 6")
        pass
    def hasContent_(self):
        if (
            self.SESSION_ID is not None or
            self.DEALER_ID is not None or
            self.DATA_DATE is not None or
            self.DEALER_SYSTEM is not None or
            self.EXTRACTION_DATE is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SERVICE_SALE_HEADER', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SERVICE_SALE_HEADER')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SERVICE_SALE_HEADER')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SERVICE_SALE_HEADER', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SERVICE_SALE_HEADER'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SERVICE_SALE_HEADER', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SESSION_ID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSESSION_ID>%s</%sSESSION_ID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SESSION_ID), input_name='SESSION_ID')), namespace_, eol_))
        if self.DEALER_ID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDEALER_ID>%s</%sDEALER_ID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DEALER_ID), input_name='DEALER_ID')), namespace_, eol_))
        if self.DATA_DATE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDATA_DATE>%s</%sDATA_DATE>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DATA_DATE), input_name='DATA_DATE')), namespace_, eol_))
        if self.DEALER_SYSTEM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDEALER_SYSTEM>%s</%sDEALER_SYSTEM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DEALER_SYSTEM), input_name='DEALER_SYSTEM')), namespace_, eol_))
        if self.EXTRACTION_DATE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEXTRACTION_DATE>%s</%sEXTRACTION_DATE>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.EXTRACTION_DATE), input_name='EXTRACTION_DATE')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SESSION_ID':
            SESSION_ID_ = child_.text
            SESSION_ID_ = self.gds_validate_string(SESSION_ID_, node, 'SESSION_ID')
            self.SESSION_ID = SESSION_ID_
            # validate type SESSION_ID
            self.validate_SESSION_ID(self.SESSION_ID)
        elif nodeName_ == 'DEALER_ID':
            DEALER_ID_ = child_.text
            DEALER_ID_ = self.gds_validate_string(DEALER_ID_, node, 'DEALER_ID')
            self.DEALER_ID = DEALER_ID_
            # validate type DEALER_ID
            self.validate_DEALER_ID(self.DEALER_ID)
        elif nodeName_ == 'DATA_DATE':
            DATA_DATE_ = child_.text
            DATA_DATE_ = self.gds_validate_string(DATA_DATE_, node, 'DATA_DATE')
            self.DATA_DATE = DATA_DATE_
            # validate type DATA_DATE
            self.validate_DATA_DATE(self.DATA_DATE)
        elif nodeName_ == 'DEALER_SYSTEM':
            DEALER_SYSTEM_ = child_.text
            DEALER_SYSTEM_ = self.gds_validate_string(DEALER_SYSTEM_, node, 'DEALER_SYSTEM')
            self.DEALER_SYSTEM = DEALER_SYSTEM_
            # validate type DEALER_SYSTEM
            self.validate_DEALER_SYSTEM(self.DEALER_SYSTEM)
        elif nodeName_ == 'EXTRACTION_DATE':
            EXTRACTION_DATE_ = child_.text
            EXTRACTION_DATE_ = self.gds_validate_string(EXTRACTION_DATE_, node, 'EXTRACTION_DATE')
            self.EXTRACTION_DATE = EXTRACTION_DATE_
            # validate type EXTRACTION_DATE
            self.validate_EXTRACTION_DATE(self.EXTRACTION_DATE)
# end class SERVICE_SALE_HEADER


class SERVICE_TYPE(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SERVICE_TYPE)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SERVICE_TYPE.subclass:
            return SERVICE_TYPE.subclass(*args_, **kwargs_)
        else:
            return SERVICE_TYPE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SERVICE_TYPE', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SERVICE_TYPE')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SERVICE_TYPE')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SERVICE_TYPE', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SERVICE_TYPE'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SERVICE_TYPE', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class SERVICE_TYPE


class SESSION_ID(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SESSION_ID)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SESSION_ID.subclass:
            return SESSION_ID.subclass(*args_, **kwargs_)
        else:
            return SESSION_ID(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SESSION_ID', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SESSION_ID')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SESSION_ID')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SESSION_ID', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SESSION_ID'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SESSION_ID', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class SESSION_ID


class TRANSIENT_VEHICLE_CODE(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TRANSIENT_VEHICLE_CODE)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TRANSIENT_VEHICLE_CODE.subclass:
            return TRANSIENT_VEHICLE_CODE.subclass(*args_, **kwargs_)
        else:
            return TRANSIENT_VEHICLE_CODE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TRANSIENT_VEHICLE_CODE', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TRANSIENT_VEHICLE_CODE')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TRANSIENT_VEHICLE_CODE')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TRANSIENT_VEHICLE_CODE', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TRANSIENT_VEHICLE_CODE'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TRANSIENT_VEHICLE_CODE', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class TRANSIENT_VEHICLE_CODE


class VEHICLE_DELIVERY_DATE(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, VEHICLE_DELIVERY_DATE)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if VEHICLE_DELIVERY_DATE.subclass:
            return VEHICLE_DELIVERY_DATE.subclass(*args_, **kwargs_)
        else:
            return VEHICLE_DELIVERY_DATE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='VEHICLE_DELIVERY_DATE', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('VEHICLE_DELIVERY_DATE')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='VEHICLE_DELIVERY_DATE')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='VEHICLE_DELIVERY_DATE', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='VEHICLE_DELIVERY_DATE'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='VEHICLE_DELIVERY_DATE', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class VEHICLE_DELIVERY_DATE


class VEHICLE_MILEAGE(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, VEHICLE_MILEAGE)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if VEHICLE_MILEAGE.subclass:
            return VEHICLE_MILEAGE.subclass(*args_, **kwargs_)
        else:
            return VEHICLE_MILEAGE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='VEHICLE_MILEAGE', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('VEHICLE_MILEAGE')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='VEHICLE_MILEAGE')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='VEHICLE_MILEAGE', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='VEHICLE_MILEAGE'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='VEHICLE_MILEAGE', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class VEHICLE_MILEAGE


class VEHICLE_MODEL(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, VEHICLE_MODEL)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if VEHICLE_MODEL.subclass:
            return VEHICLE_MODEL.subclass(*args_, **kwargs_)
        else:
            return VEHICLE_MODEL(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='VEHICLE_MODEL', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('VEHICLE_MODEL')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='VEHICLE_MODEL')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='VEHICLE_MODEL', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='VEHICLE_MODEL'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='VEHICLE_MODEL', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class VEHICLE_MODEL


class VIN(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, VIN)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if VIN.subclass:
            return VIN.subclass(*args_, **kwargs_)
        else:
            return VIN(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='VIN', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('VIN')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='VIN')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='VIN', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='VIN'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='VIN', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class VIN


class JOB_TYPE(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, JOB_TYPE)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if JOB_TYPE.subclass:
            return JOB_TYPE.subclass(*args_, **kwargs_)
        else:
            return JOB_TYPE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='JOB_TYPE', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('JOB_TYPE')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='JOB_TYPE')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='JOB_TYPE', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='JOB_TYPE'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='JOB_TYPE', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class JOB_TYPE


class JOB(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, LINE_NO=None, JOB_TYPE=None, SERVICE_TYPE=None, SERVICE_DESCRIPTION=None):
        self.original_tagname_ = None
        self.LINE_NO = LINE_NO
        self.JOB_TYPE = JOB_TYPE
        #self.validate_JOB_TYPE(self.JOB_TYPE)
        self.SERVICE_TYPE = SERVICE_TYPE
        #self.validate_SERVICE_TYPE(self.SERVICE_TYPE)
        self.SERVICE_DESCRIPTION = SERVICE_DESCRIPTION
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, JOB)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if JOB.subclass:
            return JOB.subclass(*args_, **kwargs_)
        else:
            return JOB(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LINE_NO(self): return self.LINE_NO
    def set_LINE_NO(self, LINE_NO): self.LINE_NO = LINE_NO
    def get_JOB_TYPE(self): return self.JOB_TYPE
    def set_JOB_TYPE(self, JOB_TYPE): self.JOB_TYPE = JOB_TYPE
    def get_SERVICE_TYPE(self): return self.SERVICE_TYPE
    def set_SERVICE_TYPE(self, SERVICE_TYPE): self.SERVICE_TYPE = SERVICE_TYPE
    def get_SERVICE_DESCRIPTION(self): return self.SERVICE_DESCRIPTION
    def set_SERVICE_DESCRIPTION(self, SERVICE_DESCRIPTION): self.SERVICE_DESCRIPTION = SERVICE_DESCRIPTION
    def validate_JOB_TYPE(self, value):
        # Validate type JOB_TYPE, a restriction on xsd:string.
        if value is None or len(value) != 1:
            raise GDSParseError('Length of [JOB_TYPE] should be 1')
        pass
    def validate_SERVICE_TYPE(self, value):
        # Validate type SERVICE_TYPE, a restriction on xsd:string.
        if value is None or len(value) > 120:
            raise GDSParseError("Length of [SERVICE_TYPE] should not be gt 120")
        pass
    def hasContent_(self):
        if (
            self.LINE_NO is not None or
            self.JOB_TYPE is not None or
            self.SERVICE_TYPE is not None or
            self.SERVICE_DESCRIPTION is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='JOB', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('JOB')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='JOB')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='JOB', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='JOB'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='JOB', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.LINE_NO is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sLINE_NO>%s</%sLINE_NO>%s' % (namespace_, self.gds_format_integer(self.LINE_NO, input_name='LINE_NO'), namespace_, eol_))
        if self.JOB_TYPE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sJOB_TYPE>%s</%sJOB_TYPE>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.JOB_TYPE), input_name='JOB_TYPE')), namespace_, eol_))
        if self.SERVICE_TYPE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSERVICE_TYPE>%s</%sSERVICE_TYPE>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SERVICE_TYPE), input_name='SERVICE_TYPE')), namespace_, eol_))
        if self.SERVICE_DESCRIPTION is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSERVICE_DESCRIPTION>%s</%sSERVICE_DESCRIPTION>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SERVICE_DESCRIPTION), input_name='SERVICE_DESCRIPTION')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'LINE_NO':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            ival_ = self.gds_validate_integer(ival_, node, 'LINE_NO')
            self.LINE_NO = ival_
        elif nodeName_ == 'JOB_TYPE':
            JOB_TYPE_ = child_.text
            JOB_TYPE_ = self.gds_validate_string(JOB_TYPE_, node, 'JOB_TYPE')
            self.JOB_TYPE = JOB_TYPE_
            # validate type JOB_TYPE
            self.validate_JOB_TYPE(self.JOB_TYPE)
        elif nodeName_ == 'SERVICE_TYPE':
            SERVICE_TYPE_ = child_.text
            SERVICE_TYPE_ = self.gds_validate_string(SERVICE_TYPE_, node, 'SERVICE_TYPE')
            self.SERVICE_TYPE = SERVICE_TYPE_
            # validate type SERVICE_TYPE
            self.validate_SERVICE_TYPE(self.SERVICE_TYPE)
        elif nodeName_ == 'SERVICE_DESCRIPTION':
            SERVICE_DESCRIPTION_ = child_.text
            SERVICE_DESCRIPTION_ = self.gds_validate_string(SERVICE_DESCRIPTION_, node, 'SERVICE_DESCRIPTION')
            self.SERVICE_DESCRIPTION = SERVICE_DESCRIPTION_
# end class JOB


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'xsd_double'
        rootClass = xsd_double
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
##     if not silence:
##         sys.stdout.write('<?xml version="1.0" ?>\n')
##         rootObj.export(
##             sys.stdout, 0, name_=rootTag,
##             namespacedef_='',
##             pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'xsd_double'
        rootClass = xsd_double
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
##     if not silence:
##         content = etree_.tostring(
##             rootElement, pretty_print=True,
##             xml_declaration=True, encoding="utf-8")
##         sys.stdout.write(content)
##         sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    if sys.version_info.major == 2:
        from StringIO import StringIO as IOBuffer
    else:
        from io import BytesIO as IOBuffer
    parser = None
    doc = parsexml_(IOBuffer(inString), parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'xsd_double'
        rootClass = xsd_double
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
##     if not silence:
##         sys.stdout.write('<?xml version="1.0" ?>\n')
##         rootObj.export(
##             sys.stdout, 0, name_=rootTag,
##             namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'xsd_double'
        rootClass = xsd_double
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
##     if not silence:
##         sys.stdout.write('#from dss import *\n\n')
##         sys.stdout.write('import dss as model_\n\n')
##         sys.stdout.write('rootObj = model_.rootClass(\n')
##         rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
##         sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "DATA_DATE",
    "DEALER_BRANCH_ID",
    "DEALER_ID",
    "DEALER_SYSTEM",
    "EXTRACTION_DATE",
    "JOB",
    "JOB_TYPE",
    "MARQUE",
    "RO_NO",
    "SALES_DATE",
    "SERVICE_ADVISOR_BIRTHDATE",
    "SERVICE_ADVISOR_FIRSTNAME",
    "SERVICE_ADVISOR_LASTNAME",
    "SERVICE_ADVISOR_STAFFCODE",
    "SERVICE_EVENT",
    "SERVICE_SALE",
    "SERVICE_SALE_CONTROL",
    "SERVICE_SALE_DETAIL",
    "SERVICE_SALE_HEADER",
    "SERVICE_TYPE",
    "SESSION_ID",
    "TRANSIENT_VEHICLE_CODE",
    "VEHICLE_DELIVERY_DATE",
    "VEHICLE_MILEAGE",
    "VEHICLE_MODEL",
    "VIN"
]
