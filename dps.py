#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated Thu Oct 12 01:57:29 2017 by generateDS.py version 2.28b.
# Python 2.7.9 (default, Jun 29 2016, 13:08:31)  [GCC 4.9.2]
#
# Command line options:
#   ('--silence', '')
#   ('--external-encoding', 'utf-8')
#   ('-o', '../dsr-xml-validation/dps.py')
#   ('-s', '../dsr-xml-validation/dpssubs.py')
#
# Command line arguments:
#   ../dsr-xml-validation/Dealer Part Sale.xsd
#
# Command line:
#   generateDS.py --silence --external-encoding="utf-8" -o "../dsr-xml-validation/dps.py" -s "../dsr-xml-validation/dpssubs.py" ../dsr-xml-validation/Dealer Part Sale.xsd
#
# Current working directory (os.getcwd()):
#   generateDS
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class CUST_NAME(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CUST_NAME)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CUST_NAME.subclass:
            return CUST_NAME.subclass(*args_, **kwargs_)
        else:
            return CUST_NAME(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CUST_NAME', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CUST_NAME')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CUST_NAME')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CUST_NAME', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CUST_NAME'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CUST_NAME', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class CUST_NAME


class CUST_ADDRESS(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CUST_ADDRESS)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CUST_ADDRESS.subclass:
            return CUST_ADDRESS.subclass(*args_, **kwargs_)
        else:
            return CUST_ADDRESS(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CUST_ADDRESS', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CUST_ADDRESS')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CUST_ADDRESS')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CUST_ADDRESS', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CUST_ADDRESS'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CUST_ADDRESS', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class CUST_ADDRESS


class CUST_SUBURB(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CUST_SUBURB)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CUST_SUBURB.subclass:
            return CUST_SUBURB.subclass(*args_, **kwargs_)
        else:
            return CUST_SUBURB(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CUST_SUBURB', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CUST_SUBURB')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CUST_SUBURB')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CUST_SUBURB', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CUST_SUBURB'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CUST_SUBURB', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class CUST_SUBURB


class CUST_PHONE(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, CUST_PHONE)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if CUST_PHONE.subclass:
            return CUST_PHONE.subclass(*args_, **kwargs_)
        else:
            return CUST_PHONE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='CUST_PHONE', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('CUST_PHONE')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='CUST_PHONE')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='CUST_PHONE', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='CUST_PHONE'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='CUST_PHONE', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class CUST_PHONE


class DATA_DATE(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DATA_DATE)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DATA_DATE.subclass:
            return DATA_DATE.subclass(*args_, **kwargs_)
        else:
            return DATA_DATE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DATA_DATE', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DATA_DATE')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DATA_DATE')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DATA_DATE', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DATA_DATE'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DATA_DATE', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class DATA_DATE


class DEALER_BRANCH_ID(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DEALER_BRANCH_ID)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DEALER_BRANCH_ID.subclass:
            return DEALER_BRANCH_ID.subclass(*args_, **kwargs_)
        else:
            return DEALER_BRANCH_ID(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DEALER_BRANCH_ID', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DEALER_BRANCH_ID')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DEALER_BRANCH_ID')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DEALER_BRANCH_ID', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DEALER_BRANCH_ID'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DEALER_BRANCH_ID', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class DEALER_BRANCH_ID


class DEALER_ID(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DEALER_ID)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DEALER_ID.subclass:
            return DEALER_ID.subclass(*args_, **kwargs_)
        else:
            return DEALER_ID(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DEALER_ID', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DEALER_ID')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DEALER_ID')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DEALER_ID', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DEALER_ID'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DEALER_ID', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class DEALER_ID


class DEALER_SYSTEM(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DEALER_SYSTEM)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DEALER_SYSTEM.subclass:
            return DEALER_SYSTEM.subclass(*args_, **kwargs_)
        else:
            return DEALER_SYSTEM(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DEALER_SYSTEM', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DEALER_SYSTEM')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DEALER_SYSTEM')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DEALER_SYSTEM', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DEALER_SYSTEM'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DEALER_SYSTEM', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class DEALER_SYSTEM


class PART_SALE(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, PART_SALE_HEADER=None, PART_SALE_DETAIL=None, PART_SALE_CONTROL=None):
        self.original_tagname_ = None
        self.PART_SALE_HEADER = PART_SALE_HEADER
        if PART_SALE_DETAIL is None:
            self.PART_SALE_DETAIL = []
        else:
            self.PART_SALE_DETAIL = PART_SALE_DETAIL
        self.PART_SALE_CONTROL = PART_SALE_CONTROL
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PART_SALE)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PART_SALE.subclass:
            return PART_SALE.subclass(*args_, **kwargs_)
        else:
            return PART_SALE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_PART_SALE_HEADER(self): return self.PART_SALE_HEADER
    def set_PART_SALE_HEADER(self, PART_SALE_HEADER): self.PART_SALE_HEADER = PART_SALE_HEADER
    def get_PART_SALE_DETAIL(self): return self.PART_SALE_DETAIL
    def set_PART_SALE_DETAIL(self, PART_SALE_DETAIL): self.PART_SALE_DETAIL = PART_SALE_DETAIL
    def add_PART_SALE_DETAIL(self, value): self.PART_SALE_DETAIL.append(value)
    def insert_PART_SALE_DETAIL_at(self, index, value): self.PART_SALE_DETAIL.insert(index, value)
    def replace_PART_SALE_DETAIL_at(self, index, value): self.PART_SALE_DETAIL[index] = value
    def get_PART_SALE_CONTROL(self): return self.PART_SALE_CONTROL
    def set_PART_SALE_CONTROL(self, PART_SALE_CONTROL): self.PART_SALE_CONTROL = PART_SALE_CONTROL
    def hasContent_(self):
        if (
            self.PART_SALE_HEADER is not None or
            self.PART_SALE_DETAIL or
            self.PART_SALE_CONTROL is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PART_SALE', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PART_SALE')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PART_SALE')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PART_SALE', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PART_SALE'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PART_SALE', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.PART_SALE_HEADER is not None:
            self.PART_SALE_HEADER.export(outfile, level, namespace_, name_='PART_SALE_HEADER', pretty_print=pretty_print)
        for PART_SALE_DETAIL_ in self.PART_SALE_DETAIL:
            PART_SALE_DETAIL_.export(outfile, level, namespace_, name_='PART_SALE_DETAIL', pretty_print=pretty_print)
        if self.PART_SALE_CONTROL is not None:
            self.PART_SALE_CONTROL.export(outfile, level, namespace_, name_='PART_SALE_CONTROL', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'PART_SALE_HEADER':
            obj_ = PART_SALE_HEADER.factory()
            obj_.build(child_)
            self.PART_SALE_HEADER = obj_
            obj_.original_tagname_ = 'PART_SALE_HEADER'
        elif nodeName_ == 'PART_SALE_DETAIL':
            obj_ = PART_SALE_DETAIL.factory()
            obj_.build(child_)
            self.PART_SALE_DETAIL.append(obj_)
            obj_.original_tagname_ = 'PART_SALE_DETAIL'
        elif nodeName_ == 'PART_SALE_CONTROL':
            obj_ = PART_SALE_CONTROL.factory()
            obj_.build(child_)
            self.PART_SALE_CONTROL = obj_
            obj_.original_tagname_ = 'PART_SALE_CONTROL'
# end class PART_SALE


class INVOICE_NO(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, INVOICE_NO)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if INVOICE_NO.subclass:
            return INVOICE_NO.subclass(*args_, **kwargs_)
        else:
            return INVOICE_NO(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='INVOICE_NO', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('INVOICE_NO')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='INVOICE_NO')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='INVOICE_NO', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='INVOICE_NO'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='INVOICE_NO', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class INVOICE_NO


class PART_SALE_CONTROL(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, TOTAL_RECORDS=None, TOTAL_QTY=None, TOTAL_SALES_VALUE=None):
        self.original_tagname_ = None
        self.TOTAL_RECORDS = TOTAL_RECORDS
        self.TOTAL_QTY = TOTAL_QTY
        self.TOTAL_SALES_VALUE = TOTAL_SALES_VALUE
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PART_SALE_CONTROL)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PART_SALE_CONTROL.subclass:
            return PART_SALE_CONTROL.subclass(*args_, **kwargs_)
        else:
            return PART_SALE_CONTROL(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_TOTAL_RECORDS(self): return self.TOTAL_RECORDS
    def set_TOTAL_RECORDS(self, TOTAL_RECORDS): self.TOTAL_RECORDS = TOTAL_RECORDS
    def get_TOTAL_QTY(self): return self.TOTAL_QTY
    def set_TOTAL_QTY(self, TOTAL_QTY): self.TOTAL_QTY = TOTAL_QTY
    def get_TOTAL_SALES_VALUE(self): return self.TOTAL_SALES_VALUE
    def set_TOTAL_SALES_VALUE(self, TOTAL_SALES_VALUE): self.TOTAL_SALES_VALUE = TOTAL_SALES_VALUE
    def hasContent_(self):
        if (
            self.TOTAL_RECORDS is not None or
            self.TOTAL_QTY is not None or
            self.TOTAL_SALES_VALUE is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PART_SALE_CONTROL', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PART_SALE_CONTROL')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PART_SALE_CONTROL')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PART_SALE_CONTROL', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PART_SALE_CONTROL'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PART_SALE_CONTROL', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.TOTAL_RECORDS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTOTAL_RECORDS>%s</%sTOTAL_RECORDS>%s' % (namespace_, self.gds_format_double(self.TOTAL_RECORDS, input_name='TOTAL_RECORDS'), namespace_, eol_))
        if self.TOTAL_QTY is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTOTAL_QTY>%s</%sTOTAL_QTY>%s' % (namespace_, self.gds_format_double(self.TOTAL_QTY, input_name='TOTAL_QTY'), namespace_, eol_))
        if self.TOTAL_SALES_VALUE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sTOTAL_SALES_VALUE>%s</%sTOTAL_SALES_VALUE>%s' % (namespace_, self.gds_format_float(self.TOTAL_SALES_VALUE, input_name='TOTAL_SALES_VALUE'), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'TOTAL_RECORDS':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TOTAL_RECORDS')
            self.TOTAL_RECORDS = fval_
        elif nodeName_ == 'TOTAL_QTY':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TOTAL_QTY')
            self.TOTAL_QTY = fval_
        elif nodeName_ == 'TOTAL_SALES_VALUE':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'TOTAL_SALES_VALUE')
            self.TOTAL_SALES_VALUE = fval_
# end class PART_SALE_CONTROL


class PART_SALE_DETAIL(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, DEALER_BRANCH_ID=None, PART_NO=None, PART_DESCRIPTION=None, SUPP_CODE=None, SUPP_DESCRIPTION=None, TMC_PART_NO=None, CUST_CAT=None, CUST_ID=None, CUST_NAME=None, CUST_ADDRESS=None, CUST_SUBURB=None, CUST_STATE=None, CUST_POSTCODE=None, CUST_PHONE=None, INVOICE_NO=None, RO_NO=None, QTY=None, UNIT_RRP=None, UNIT_AVG_COSTS=None, ACT_SALES_PRICE=None):
        self.original_tagname_ = None
        self.DEALER_BRANCH_ID = DEALER_BRANCH_ID
        self.validate_DEALER_BRANCH_ID(self.DEALER_BRANCH_ID)
        self.PART_NO = PART_NO
        self.PART_DESCRIPTION = PART_DESCRIPTION
        self.validate_PART_DESCRIPTION(self.PART_DESCRIPTION)
        self.SUPP_CODE = SUPP_CODE
        self.validate_SUPP_CODE(self.SUPP_CODE)
        self.SUPP_DESCRIPTION = SUPP_DESCRIPTION
        self.validate_SUPP_DESCRIPTION(self.SUPP_DESCRIPTION)
        self.TMC_PART_NO = TMC_PART_NO
        self.CUST_CAT = CUST_CAT
        self.CUST_ID = CUST_ID
        self.CUST_NAME = CUST_NAME
        self.validate_CUST_NAME(self.CUST_NAME)
        self.CUST_ADDRESS = CUST_ADDRESS
        self.validate_CUST_ADDRESS(self.CUST_ADDRESS)
        self.CUST_SUBURB = CUST_SUBURB
        self.validate_CUST_SUBURB(self.CUST_SUBURB)
        self.CUST_STATE = CUST_STATE
        self.CUST_POSTCODE = CUST_POSTCODE
        self.CUST_PHONE = CUST_PHONE
        self.validate_CUST_PHONE(self.CUST_PHONE)
        self.INVOICE_NO = INVOICE_NO
        self.validate_INVOICE_NO(self.INVOICE_NO)
        self.RO_NO = RO_NO
        self.QTY = QTY
        self.UNIT_RRP = UNIT_RRP
        self.UNIT_AVG_COSTS = UNIT_AVG_COSTS
        self.ACT_SALES_PRICE = ACT_SALES_PRICE
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PART_SALE_DETAIL)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PART_SALE_DETAIL.subclass:
            return PART_SALE_DETAIL.subclass(*args_, **kwargs_)
        else:
            return PART_SALE_DETAIL(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_DEALER_BRANCH_ID(self): return self.DEALER_BRANCH_ID
    def set_DEALER_BRANCH_ID(self, DEALER_BRANCH_ID): self.DEALER_BRANCH_ID = DEALER_BRANCH_ID
    def get_PART_NO(self): return self.PART_NO
    def set_PART_NO(self, PART_NO): self.PART_NO = PART_NO
    def get_PART_DESCRIPTION(self): return self.PART_DESCRIPTION
    def set_PART_DESCRIPTION(self, PART_DESCRIPTION): self.PART_DESCRIPTION = PART_DESCRIPTION
    def get_SUPP_CODE(self): return self.SUPP_CODE
    def set_SUPP_CODE(self, SUPP_CODE): self.SUPP_CODE = SUPP_CODE
    def get_SUPP_DESCRIPTION(self): return self.SUPP_DESCRIPTION
    def set_SUPP_DESCRIPTION(self, SUPP_DESCRIPTION): self.SUPP_DESCRIPTION = SUPP_DESCRIPTION
    def get_TMC_PART_NO(self): return self.TMC_PART_NO
    def set_TMC_PART_NO(self, TMC_PART_NO): self.TMC_PART_NO = TMC_PART_NO
    def get_CUST_CAT(self): return self.CUST_CAT
    def set_CUST_CAT(self, CUST_CAT): self.CUST_CAT = CUST_CAT
    def get_CUST_ID(self): return self.CUST_ID
    def set_CUST_ID(self, CUST_ID): self.CUST_ID = CUST_ID
    def get_CUST_NAME(self): return self.CUST_NAME
    def set_CUST_NAME(self, CUST_NAME): self.CUST_NAME = CUST_NAME
    def get_CUST_ADDRESS(self): return self.CUST_ADDRESS
    def set_CUST_ADDRESS(self, CUST_ADDRESS): self.CUST_ADDRESS = CUST_ADDRESS
    def get_CUST_SUBURB(self): return self.CUST_SUBURB
    def set_CUST_SUBURB(self, CUST_SUBURB): self.CUST_SUBURB = CUST_SUBURB
    def get_CUST_STATE(self): return self.CUST_STATE
    def set_CUST_STATE(self, CUST_STATE): self.CUST_STATE = CUST_STATE
    def get_CUST_POSTCODE(self): return self.CUST_POSTCODE
    def set_CUST_POSTCODE(self, CUST_POSTCODE): self.CUST_POSTCODE = CUST_POSTCODE
    def get_CUST_PHONE(self): return self.CUST_PHONE
    def set_CUST_PHONE(self, CUST_PHONE): self.CUST_PHONE = CUST_PHONE
    def get_INVOICE_NO(self): return self.INVOICE_NO
    def set_INVOICE_NO(self, INVOICE_NO): self.INVOICE_NO = INVOICE_NO
    def get_RO_NO(self): return self.RO_NO
    def set_RO_NO(self, RO_NO): self.RO_NO = RO_NO
    def get_QTY(self): return self.QTY
    def set_QTY(self, QTY): self.QTY = QTY
    def get_UNIT_RRP(self): return self.UNIT_RRP
    def set_UNIT_RRP(self, UNIT_RRP): self.UNIT_RRP = UNIT_RRP
    def get_UNIT_AVG_COSTS(self): return self.UNIT_AVG_COSTS
    def set_UNIT_AVG_COSTS(self, UNIT_AVG_COSTS): self.UNIT_AVG_COSTS = UNIT_AVG_COSTS
    def get_ACT_SALES_PRICE(self): return self.ACT_SALES_PRICE
    def set_ACT_SALES_PRICE(self, ACT_SALES_PRICE): self.ACT_SALES_PRICE = ACT_SALES_PRICE
    def validate_DEALER_BRANCH_ID(self, value):
        # Validate type DEALER_BRANCH_ID, a restriction on xsd:string.
        pass
    def validate_PART_DESCRIPTION(self, value):
        # Validate type PART_DESCRIPTION, a restriction on xsd:string.
        pass
    def validate_SUPP_CODE(self, value):
        # Validate type SUPP_CODE, a restriction on xsd:string.
        pass
    def validate_SUPP_DESCRIPTION(self, value):
        # Validate type SUPP_DESCRIPTION, a restriction on xsd:string.
        pass
    def validate_CUST_NAME(self, value):
        # Validate type CUST_NAME, a restriction on xsd:string.
        pass
    def validate_CUST_ADDRESS(self, value):
        # Validate type CUST_ADDRESS, a restriction on xsd:string.
        pass
    def validate_CUST_SUBURB(self, value):
        # Validate type CUST_SUBURB, a restriction on xsd:string.
        pass
    def validate_CUST_PHONE(self, value):
        # Validate type CUST_PHONE, a restriction on xsd:string.
        pass
    def validate_INVOICE_NO(self, value):
        # Validate type INVOICE_NO, a restriction on xsd:string.
        pass
    def hasContent_(self):
        if (
            self.DEALER_BRANCH_ID is not None or
            self.PART_NO is not None or
            self.PART_DESCRIPTION is not None or
            self.SUPP_CODE is not None or
            self.SUPP_DESCRIPTION is not None or
            self.TMC_PART_NO is not None or
            self.CUST_CAT is not None or
            self.CUST_ID is not None or
            self.CUST_NAME is not None or
            self.CUST_ADDRESS is not None or
            self.CUST_SUBURB is not None or
            self.CUST_STATE is not None or
            self.CUST_POSTCODE is not None or
            self.CUST_PHONE is not None or
            self.INVOICE_NO is not None or
            self.RO_NO is not None or
            self.QTY is not None or
            self.UNIT_RRP is not None or
            self.UNIT_AVG_COSTS is not None or
            self.ACT_SALES_PRICE is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PART_SALE_DETAIL', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PART_SALE_DETAIL')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PART_SALE_DETAIL')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PART_SALE_DETAIL', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PART_SALE_DETAIL'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PART_SALE_DETAIL', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.DEALER_BRANCH_ID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDEALER_BRANCH_ID>%s</%sDEALER_BRANCH_ID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DEALER_BRANCH_ID), input_name='DEALER_BRANCH_ID')), namespace_, eol_))
        if self.PART_NO is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPART_NO>%s</%sPART_NO>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PART_NO), input_name='PART_NO')), namespace_, eol_))
        if self.PART_DESCRIPTION is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPART_DESCRIPTION>%s</%sPART_DESCRIPTION>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PART_DESCRIPTION), input_name='PART_DESCRIPTION')), namespace_, eol_))
        if self.SUPP_CODE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSUPP_CODE>%s</%sSUPP_CODE>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SUPP_CODE), input_name='SUPP_CODE')), namespace_, eol_))
        if self.SUPP_DESCRIPTION is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSUPP_DESCRIPTION>%s</%sSUPP_DESCRIPTION>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SUPP_DESCRIPTION), input_name='SUPP_DESCRIPTION')), namespace_, eol_))
        if self.TMC_PART_NO is not None:
            self.TMC_PART_NO.export(outfile, level, namespace_, name_='TMC_PART_NO', pretty_print=pretty_print)
        if self.CUST_CAT is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCUST_CAT>%s</%sCUST_CAT>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CUST_CAT), input_name='CUST_CAT')), namespace_, eol_))
        if self.CUST_ID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCUST_ID>%s</%sCUST_ID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CUST_ID), input_name='CUST_ID')), namespace_, eol_))
        if self.CUST_NAME is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCUST_NAME>%s</%sCUST_NAME>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CUST_NAME), input_name='CUST_NAME')), namespace_, eol_))
        if self.CUST_ADDRESS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCUST_ADDRESS>%s</%sCUST_ADDRESS>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CUST_ADDRESS), input_name='CUST_ADDRESS')), namespace_, eol_))
        if self.CUST_SUBURB is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCUST_SUBURB>%s</%sCUST_SUBURB>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CUST_SUBURB), input_name='CUST_SUBURB')), namespace_, eol_))
        if self.CUST_STATE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCUST_STATE>%s</%sCUST_STATE>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CUST_STATE), input_name='CUST_STATE')), namespace_, eol_))
        if self.CUST_POSTCODE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCUST_POSTCODE>%s</%sCUST_POSTCODE>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CUST_POSTCODE), input_name='CUST_POSTCODE')), namespace_, eol_))
        if self.CUST_PHONE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCUST_PHONE>%s</%sCUST_PHONE>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CUST_PHONE), input_name='CUST_PHONE')), namespace_, eol_))
        if self.INVOICE_NO is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sINVOICE_NO>%s</%sINVOICE_NO>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.INVOICE_NO), input_name='INVOICE_NO')), namespace_, eol_))
        if self.RO_NO is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRO_NO>%s</%sRO_NO>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RO_NO), input_name='RO_NO')), namespace_, eol_))
        if self.QTY is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sQTY>%s</%sQTY>%s' % (namespace_, self.gds_format_double(self.QTY, input_name='QTY'), namespace_, eol_))
        if self.UNIT_RRP is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUNIT_RRP>%s</%sUNIT_RRP>%s' % (namespace_, self.gds_format_double(self.UNIT_RRP, input_name='UNIT_RRP'), namespace_, eol_))
        if self.UNIT_AVG_COSTS is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sUNIT_AVG_COSTS>%s</%sUNIT_AVG_COSTS>%s' % (namespace_, self.gds_format_float(self.UNIT_AVG_COSTS, input_name='UNIT_AVG_COSTS'), namespace_, eol_))
        if self.ACT_SALES_PRICE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sACT_SALES_PRICE>%s</%sACT_SALES_PRICE>%s' % (namespace_, self.gds_format_double(self.ACT_SALES_PRICE, input_name='ACT_SALES_PRICE'), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'DEALER_BRANCH_ID':
            DEALER_BRANCH_ID_ = child_.text
            DEALER_BRANCH_ID_ = self.gds_validate_string(DEALER_BRANCH_ID_, node, 'DEALER_BRANCH_ID')
            self.DEALER_BRANCH_ID = DEALER_BRANCH_ID_
            # validate type DEALER_BRANCH_ID
            self.validate_DEALER_BRANCH_ID(self.DEALER_BRANCH_ID)
        elif nodeName_ == 'PART_NO':
            PART_NO_ = child_.text
            PART_NO_ = self.gds_validate_string(PART_NO_, node, 'PART_NO')
            self.PART_NO = PART_NO_
        elif nodeName_ == 'PART_DESCRIPTION':
            PART_DESCRIPTION_ = child_.text
            PART_DESCRIPTION_ = self.gds_validate_string(PART_DESCRIPTION_, node, 'PART_DESCRIPTION')
            self.PART_DESCRIPTION = PART_DESCRIPTION_
            # validate type PART_DESCRIPTION
            self.validate_PART_DESCRIPTION(self.PART_DESCRIPTION)
        elif nodeName_ == 'SUPP_CODE':
            SUPP_CODE_ = child_.text
            SUPP_CODE_ = self.gds_validate_string(SUPP_CODE_, node, 'SUPP_CODE')
            self.SUPP_CODE = SUPP_CODE_
            # validate type SUPP_CODE
            self.validate_SUPP_CODE(self.SUPP_CODE)
        elif nodeName_ == 'SUPP_DESCRIPTION':
            SUPP_DESCRIPTION_ = child_.text
            SUPP_DESCRIPTION_ = self.gds_validate_string(SUPP_DESCRIPTION_, node, 'SUPP_DESCRIPTION')
            self.SUPP_DESCRIPTION = SUPP_DESCRIPTION_
            # validate type SUPP_DESCRIPTION
            self.validate_SUPP_DESCRIPTION(self.SUPP_DESCRIPTION)
        elif nodeName_ == 'TMC_PART_NO':
            obj_ = TMC_PART_NO.factory()
            obj_.build(child_)
            self.TMC_PART_NO = obj_
            obj_.original_tagname_ = 'TMC_PART_NO'
        elif nodeName_ == 'CUST_CAT':
            CUST_CAT_ = child_.text
            CUST_CAT_ = self.gds_validate_string(CUST_CAT_, node, 'CUST_CAT')
            self.CUST_CAT = CUST_CAT_
        elif nodeName_ == 'CUST_ID':
            CUST_ID_ = child_.text
            CUST_ID_ = self.gds_validate_string(CUST_ID_, node, 'CUST_ID')
            self.CUST_ID = CUST_ID_
        elif nodeName_ == 'CUST_NAME':
            CUST_NAME_ = child_.text
            CUST_NAME_ = self.gds_validate_string(CUST_NAME_, node, 'CUST_NAME')
            self.CUST_NAME = CUST_NAME_
            # validate type CUST_NAME
            self.validate_CUST_NAME(self.CUST_NAME)
        elif nodeName_ == 'CUST_ADDRESS':
            CUST_ADDRESS_ = child_.text
            CUST_ADDRESS_ = self.gds_validate_string(CUST_ADDRESS_, node, 'CUST_ADDRESS')
            self.CUST_ADDRESS = CUST_ADDRESS_
            # validate type CUST_ADDRESS
            self.validate_CUST_ADDRESS(self.CUST_ADDRESS)
        elif nodeName_ == 'CUST_SUBURB':
            CUST_SUBURB_ = child_.text
            CUST_SUBURB_ = self.gds_validate_string(CUST_SUBURB_, node, 'CUST_SUBURB')
            self.CUST_SUBURB = CUST_SUBURB_
            # validate type CUST_SUBURB
            self.validate_CUST_SUBURB(self.CUST_SUBURB)
        elif nodeName_ == 'CUST_STATE':
            CUST_STATE_ = child_.text
            CUST_STATE_ = self.gds_validate_string(CUST_STATE_, node, 'CUST_STATE')
            self.CUST_STATE = CUST_STATE_
        elif nodeName_ == 'CUST_POSTCODE':
            CUST_POSTCODE_ = child_.text
            CUST_POSTCODE_ = self.gds_validate_string(CUST_POSTCODE_, node, 'CUST_POSTCODE')
            self.CUST_POSTCODE = CUST_POSTCODE_
        elif nodeName_ == 'CUST_PHONE':
            CUST_PHONE_ = child_.text
            CUST_PHONE_ = self.gds_validate_string(CUST_PHONE_, node, 'CUST_PHONE')
            self.CUST_PHONE = CUST_PHONE_
            # validate type CUST_PHONE
            self.validate_CUST_PHONE(self.CUST_PHONE)
        elif nodeName_ == 'INVOICE_NO':
            INVOICE_NO_ = child_.text
            INVOICE_NO_ = self.gds_validate_string(INVOICE_NO_, node, 'INVOICE_NO')
            self.INVOICE_NO = INVOICE_NO_
            # validate type INVOICE_NO
            self.validate_INVOICE_NO(self.INVOICE_NO)
        elif nodeName_ == 'RO_NO':
            RO_NO_ = child_.text
            RO_NO_ = self.gds_validate_string(RO_NO_, node, 'RO_NO')
            self.RO_NO = RO_NO_
        elif nodeName_ == 'QTY':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'QTY')
            self.QTY = fval_
        elif nodeName_ == 'UNIT_RRP':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'UNIT_RRP')
            self.UNIT_RRP = fval_
        elif nodeName_ == 'UNIT_AVG_COSTS':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'UNIT_AVG_COSTS')
            self.UNIT_AVG_COSTS = fval_
        elif nodeName_ == 'ACT_SALES_PRICE':
            sval_ = child_.text
            try:
                fval_ = float(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires float or double: %s' % exp)
            fval_ = self.gds_validate_float(fval_, node, 'ACT_SALES_PRICE')
            self.ACT_SALES_PRICE = fval_
# end class PART_SALE_DETAIL


class PART_SALE_HEADER(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, SESSION_ID=None, DEALER_ID=None, DATA_DATE=None, DEALER_SYSTEM=None, EXTRACTION_DATE=None):
        self.original_tagname_ = None
        self.SESSION_ID = SESSION_ID
        self.validate_SESSION_ID(self.SESSION_ID)
        self.DEALER_ID = DEALER_ID
        self.validate_DEALER_ID(self.DEALER_ID)
        self.DATA_DATE = DATA_DATE
        self.validate_DATA_DATE(self.DATA_DATE)
        self.DEALER_SYSTEM = DEALER_SYSTEM
        self.validate_DEALER_SYSTEM(self.DEALER_SYSTEM)
        self.EXTRACTION_DATE = EXTRACTION_DATE
        self.validate_EXTRACTION_DATE(self.EXTRACTION_DATE)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PART_SALE_HEADER)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PART_SALE_HEADER.subclass:
            return PART_SALE_HEADER.subclass(*args_, **kwargs_)
        else:
            return PART_SALE_HEADER(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SESSION_ID(self): return self.SESSION_ID
    def set_SESSION_ID(self, SESSION_ID): self.SESSION_ID = SESSION_ID
    def get_DEALER_ID(self): return self.DEALER_ID
    def set_DEALER_ID(self, DEALER_ID): self.DEALER_ID = DEALER_ID
    def get_DATA_DATE(self): return self.DATA_DATE
    def set_DATA_DATE(self, DATA_DATE): self.DATA_DATE = DATA_DATE
    def get_DEALER_SYSTEM(self): return self.DEALER_SYSTEM
    def set_DEALER_SYSTEM(self, DEALER_SYSTEM): self.DEALER_SYSTEM = DEALER_SYSTEM
    def get_EXTRACTION_DATE(self): return self.EXTRACTION_DATE
    def set_EXTRACTION_DATE(self, EXTRACTION_DATE): self.EXTRACTION_DATE = EXTRACTION_DATE
    def validate_SESSION_ID(self, value):
        # Validate type SESSION_ID, a restriction on xsd:string.
        pass
    def validate_DEALER_ID(self, value):
        # Validate type DEALER_ID, a restriction on xsd:string.
        pass
    def validate_DATA_DATE(self, value):
        # Validate type DATA_DATE, a restriction on xsd:string.
        pass
    def validate_DEALER_SYSTEM(self, value):
        # Validate type DEALER_SYSTEM, a restriction on xsd:string.
        pass
    def validate_EXTRACTION_DATE(self, value):
        # Validate type EXTRACTION_DATE, a restriction on xsd:string.
        pass
    def hasContent_(self):
        if (
            self.SESSION_ID is not None or
            self.DEALER_ID is not None or
            self.DATA_DATE is not None or
            self.DEALER_SYSTEM is not None or
            self.EXTRACTION_DATE is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PART_SALE_HEADER', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PART_SALE_HEADER')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PART_SALE_HEADER')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PART_SALE_HEADER', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PART_SALE_HEADER'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PART_SALE_HEADER', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SESSION_ID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSESSION_ID>%s</%sSESSION_ID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SESSION_ID), input_name='SESSION_ID')), namespace_, eol_))
        if self.DEALER_ID is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDEALER_ID>%s</%sDEALER_ID>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DEALER_ID), input_name='DEALER_ID')), namespace_, eol_))
        if self.DATA_DATE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDATA_DATE>%s</%sDATA_DATE>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DATA_DATE), input_name='DATA_DATE')), namespace_, eol_))
        if self.DEALER_SYSTEM is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sDEALER_SYSTEM>%s</%sDEALER_SYSTEM>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.DEALER_SYSTEM), input_name='DEALER_SYSTEM')), namespace_, eol_))
        if self.EXTRACTION_DATE is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sEXTRACTION_DATE>%s</%sEXTRACTION_DATE>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.EXTRACTION_DATE), input_name='EXTRACTION_DATE')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SESSION_ID':
            SESSION_ID_ = child_.text
            SESSION_ID_ = self.gds_validate_string(SESSION_ID_, node, 'SESSION_ID')
            self.SESSION_ID = SESSION_ID_
            # validate type SESSION_ID
            self.validate_SESSION_ID(self.SESSION_ID)
        elif nodeName_ == 'DEALER_ID':
            DEALER_ID_ = child_.text
            DEALER_ID_ = self.gds_validate_string(DEALER_ID_, node, 'DEALER_ID')
            self.DEALER_ID = DEALER_ID_
            # validate type DEALER_ID
            self.validate_DEALER_ID(self.DEALER_ID)
        elif nodeName_ == 'DATA_DATE':
            DATA_DATE_ = child_.text
            DATA_DATE_ = self.gds_validate_string(DATA_DATE_, node, 'DATA_DATE')
            self.DATA_DATE = DATA_DATE_
            # validate type DATA_DATE
            self.validate_DATA_DATE(self.DATA_DATE)
        elif nodeName_ == 'DEALER_SYSTEM':
            DEALER_SYSTEM_ = child_.text
            DEALER_SYSTEM_ = self.gds_validate_string(DEALER_SYSTEM_, node, 'DEALER_SYSTEM')
            self.DEALER_SYSTEM = DEALER_SYSTEM_
            # validate type DEALER_SYSTEM
            self.validate_DEALER_SYSTEM(self.DEALER_SYSTEM)
        elif nodeName_ == 'EXTRACTION_DATE':
            EXTRACTION_DATE_ = child_.text
            EXTRACTION_DATE_ = self.gds_validate_string(EXTRACTION_DATE_, node, 'EXTRACTION_DATE')
            self.EXTRACTION_DATE = EXTRACTION_DATE_
            # validate type EXTRACTION_DATE
            self.validate_EXTRACTION_DATE(self.EXTRACTION_DATE)
# end class PART_SALE_HEADER


class EXTRACTION_DATE(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, EXTRACTION_DATE)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if EXTRACTION_DATE.subclass:
            return EXTRACTION_DATE.subclass(*args_, **kwargs_)
        else:
            return EXTRACTION_DATE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='EXTRACTION_DATE', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('EXTRACTION_DATE')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='EXTRACTION_DATE')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='EXTRACTION_DATE', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='EXTRACTION_DATE'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='EXTRACTION_DATE', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class EXTRACTION_DATE


class SALES_DATE(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SALES_DATE)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SALES_DATE.subclass:
            return SALES_DATE.subclass(*args_, **kwargs_)
        else:
            return SALES_DATE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SALES_DATE', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SALES_DATE')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SALES_DATE')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SALES_DATE', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SALES_DATE'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SALES_DATE', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class SALES_DATE


class SESSION_ID(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SESSION_ID)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SESSION_ID.subclass:
            return SESSION_ID.subclass(*args_, **kwargs_)
        else:
            return SESSION_ID(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SESSION_ID', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SESSION_ID')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SESSION_ID')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SESSION_ID', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SESSION_ID'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SESSION_ID', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class SESSION_ID


class PART_DESCRIPTION(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, PART_DESCRIPTION)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if PART_DESCRIPTION.subclass:
            return PART_DESCRIPTION.subclass(*args_, **kwargs_)
        else:
            return PART_DESCRIPTION(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='PART_DESCRIPTION', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('PART_DESCRIPTION')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='PART_DESCRIPTION')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='PART_DESCRIPTION', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='PART_DESCRIPTION'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='PART_DESCRIPTION', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class PART_DESCRIPTION


class SUPP_CODE(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SUPP_CODE)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SUPP_CODE.subclass:
            return SUPP_CODE.subclass(*args_, **kwargs_)
        else:
            return SUPP_CODE(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SUPP_CODE', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SUPP_CODE')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SUPP_CODE')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SUPP_CODE', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SUPP_CODE'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SUPP_CODE', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class SUPP_CODE


class SUPP_DESCRIPTION(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SUPP_DESCRIPTION)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SUPP_DESCRIPTION.subclass:
            return SUPP_DESCRIPTION.subclass(*args_, **kwargs_)
        else:
            return SUPP_DESCRIPTION(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SUPP_DESCRIPTION', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SUPP_DESCRIPTION')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SUPP_DESCRIPTION')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SUPP_DESCRIPTION', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SUPP_DESCRIPTION'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SUPP_DESCRIPTION', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class SUPP_DESCRIPTION


class TMC_PART_NO(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self):
        self.original_tagname_ = None
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TMC_PART_NO)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TMC_PART_NO.subclass:
            return TMC_PART_NO.subclass(*args_, **kwargs_)
        else:
            return TMC_PART_NO(*args_, **kwargs_)
    factory = staticmethod(factory)
    def hasContent_(self):
        if (

        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TMC_PART_NO', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TMC_PART_NO')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TMC_PART_NO')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TMC_PART_NO', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TMC_PART_NO'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TMC_PART_NO', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class TMC_PART_NO


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'xsd_double'
        rootClass = xsd_double
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
##     if not silence:
##         sys.stdout.write('<?xml version="1.0" ?>\n')
##         rootObj.export(
##             sys.stdout, 0, name_=rootTag,
##             namespacedef_='',
##             pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'xsd_double'
        rootClass = xsd_double
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
##     if not silence:
##         content = etree_.tostring(
##             rootElement, pretty_print=True,
##             xml_declaration=True, encoding="utf-8")
##         sys.stdout.write(content)
##         sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    if sys.version_info.major == 2:
        from StringIO import StringIO as IOBuffer
    else:
        from io import BytesIO as IOBuffer
    parser = None
    doc = parsexml_(IOBuffer(inString), parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'xsd_double'
        rootClass = xsd_double
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
##     if not silence:
##         sys.stdout.write('<?xml version="1.0" ?>\n')
##         rootObj.export(
##             sys.stdout, 0, name_=rootTag,
##             namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'xsd_double'
        rootClass = xsd_double
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
##     if not silence:
##         sys.stdout.write('#from dps import *\n\n')
##         sys.stdout.write('import dps as model_\n\n')
##         sys.stdout.write('rootObj = model_.rootClass(\n')
##         rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
##         sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "CUST_ADDRESS",
    "CUST_NAME",
    "CUST_PHONE",
    "CUST_SUBURB",
    "DATA_DATE",
    "DEALER_BRANCH_ID",
    "DEALER_ID",
    "DEALER_SYSTEM",
    "EXTRACTION_DATE",
    "INVOICE_NO",
    "PART_DESCRIPTION",
    "PART_SALE",
    "PART_SALE_CONTROL",
    "PART_SALE_DETAIL",
    "PART_SALE_HEADER",
    "SALES_DATE",
    "SESSION_ID",
    "SUPP_CODE",
    "SUPP_DESCRIPTION",
    "TMC_PART_NO"
]
